"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import regex

schema ValuesSchema:
    r"""
    ValuesSchema

    Attributes
    ----------
    backstage : ValuesSchemaBackstage, optional
    clusterDomain : str, optional, default is "cluster.local"
    commonAnnotations : ValuesSchemaCommonAnnotations, optional, default is {}
    commonLabels : ValuesSchemaCommonLabels, optional, default is {}
    diagnosticMode : ValuesSchemaDiagnosticMode, optional
    extraDeploy : [str | any], optional, default is []
    fullnameOverride : str, optional, default is ""
    global : ValuesSchemaGlobal, optional
    ingress : ValuesSchemaIngress, optional
    kubeVersion : str, optional, default is ""
    metrics : ValuesSchemaMetrics, optional
        Allows configuring your backstage instance as a scrape target for Prometheus. Ref: https://github.com/prometheus/prometheus
    nameOverride : str, optional, default is ""
    networkPolicy : ValuesSchemaNetworkPolicy, optional
    postgresql : ValuesSchemaPostgresql, optional
    service : ValuesSchemaService, optional
    serviceAccount : ValuesSchemaServiceAccount, optional
    """

    backstage?: ValuesSchemaBackstage
    clusterDomain?: str = "cluster.local"
    commonAnnotations?: ValuesSchemaCommonAnnotations = {}
    commonLabels?: ValuesSchemaCommonLabels = {}
    diagnosticMode?: ValuesSchemaDiagnosticMode
    extraDeploy?: [str | any] = []
    fullnameOverride?: str = ""
    global?: ValuesSchemaGlobal
    ingress?: ValuesSchemaIngress
    kubeVersion?: str = ""
    metrics?: ValuesSchemaMetrics
    nameOverride?: str = ""
    networkPolicy?: ValuesSchemaNetworkPolicy
    postgresql?: ValuesSchemaPostgresql
    service?: ValuesSchemaService
    serviceAccount?: ValuesSchemaServiceAccount

    check:
        isunique(extraDeploy) if extraDeploy

schema ValuesSchemaBackstage:
    r"""
    ValuesSchemaBackstage

    Attributes
    ----------
    affinity : ValuesSchemaBackstageAffinity, optional, default is {}
        Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    annotations : ValuesSchemaBackstageAnnotations, optional, default is {}
    appConfig : any | str, optional, default is {}
    args : [str], optional, default is []
    command : [str], optional, default is ["node", "packages/backend"]
    containerPorts : ValuesSchemaBackstageContainerPorts, optional
    containerSecurityContext : ValuesSchemaBackstageContainerSecurityContext, optional
        SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
    extraAppConfig : [ValuesSchemaBackstageExtraAppConfigItems0], optional, default is []
    extraContainers : [ValuesSchemaBackstageExtraContainersItems0], optional, default is []
    extraEnvVars : [ValuesSchemaBackstageExtraEnvVarsItems0], optional, default is []
    extraEnvVarsCM : [str], optional, default is []
        Translates into array of `envFrom.[].configMapRef.name`
    extraEnvVarsSecrets : [str], optional, default is []
        Translates into array of `envFrom.[].secretRef.name`
    extraPorts : [ValuesSchemaBackstageExtraPortsItems0], optional, default is []
    extraVolumeMounts : [ValuesSchemaBackstageExtraVolumeMountsItems0], optional, default is []
    extraVolumes : [ValuesSchemaBackstageExtraVolumesItems0], optional, default is []
    hostAliases : [ValuesSchemaBackstageHostAliasesItems0], optional, default is []
        Ref: https://kubernetes.io/docs/tasks/network/customize-hosts-file-for-pods/#adding-additional-entries-with-hostaliases
    image : ValuesSchemaBackstageImage, optional
    initContainers : [ValuesSchemaBackstageInitContainersItems0], optional, default is []
    installDir : str, optional, default is "/app"
    livenessProbe : ValuesSchemaBackstageLivenessProbe, optional
        Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
    nodeSelector : ValuesSchemaBackstageNodeSelector, optional, default is {}
        Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
    pdb : ValuesSchemaBackstagePdb, optional
    podAnnotations : ValuesSchemaBackstagePodAnnotations, optional, default is {}
    podLabels : ValuesSchemaBackstagePodLabels, optional, default is {}
    podSecurityContext : ValuesSchemaBackstagePodSecurityContext, optional
        SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
    readinessProbe : ValuesSchemaBackstageReadinessProbe, optional
        Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
    replicas : int, optional, default is 1
    resources : ValuesSchemaBackstageResources, optional
        ResourceRequirements describes the compute resource requirements.
    revisionHistoryLimit : int, optional, default is 10
    startupProbe : ValuesSchemaBackstageStartupProbe, optional
        Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
    tolerations : [ValuesSchemaBackstageTolerationsItems0], optional, default is []
        Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
    topologySpreadConstraints : [ValuesSchemaBackstageTopologySpreadConstraintsItems0], optional, default is []
        Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#pod-topology-spread-constraints
    """

    affinity?: ValuesSchemaBackstageAffinity = {}
    annotations?: ValuesSchemaBackstageAnnotations = {}
    appConfig?: any | str = {}
    args?: [str] = []
    command?: [str] = ["node", "packages/backend"]
    containerPorts?: ValuesSchemaBackstageContainerPorts
    containerSecurityContext?: ValuesSchemaBackstageContainerSecurityContext
    extraAppConfig?: [ValuesSchemaBackstageExtraAppConfigItems0] = []
    extraContainers?: [ValuesSchemaBackstageExtraContainersItems0] = []
    extraEnvVars?: [ValuesSchemaBackstageExtraEnvVarsItems0] = []
    extraEnvVarsCM?: [str] = []
    extraEnvVarsSecrets?: [str] = []
    extraPorts?: [ValuesSchemaBackstageExtraPortsItems0] = []
    extraVolumeMounts?: [ValuesSchemaBackstageExtraVolumeMountsItems0] = []
    extraVolumes?: [ValuesSchemaBackstageExtraVolumesItems0] = []
    hostAliases?: [ValuesSchemaBackstageHostAliasesItems0] = []
    image?: ValuesSchemaBackstageImage
    initContainers?: [ValuesSchemaBackstageInitContainersItems0] = []
    installDir?: str = "/app"
    livenessProbe?: ValuesSchemaBackstageLivenessProbe
    nodeSelector?: ValuesSchemaBackstageNodeSelector = {}
    pdb?: ValuesSchemaBackstagePdb
    podAnnotations?: ValuesSchemaBackstagePodAnnotations = {}
    podLabels?: ValuesSchemaBackstagePodLabels = {}
    podSecurityContext?: ValuesSchemaBackstagePodSecurityContext
    readinessProbe?: ValuesSchemaBackstageReadinessProbe
    replicas?: int = 1
    resources?: ValuesSchemaBackstageResources
    revisionHistoryLimit?: int = 10
    startupProbe?: ValuesSchemaBackstageStartupProbe
    tolerations?: [ValuesSchemaBackstageTolerationsItems0] = []
    topologySpreadConstraints?: [ValuesSchemaBackstageTopologySpreadConstraintsItems0] = []

    check:
        replicas >= 0 if replicas
        revisionHistoryLimit >= 0 if revisionHistoryLimit

schema ValuesSchemaBackstageAffinity:
    r"""
    Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity

    Attributes
    ----------
    nodeAffinity : ValuesSchemaBackstageAffinityNodeAffinity, optional
        Node affinity is a group of node affinity scheduling rules.
    podAffinity : ValuesSchemaBackstageAffinityPodAffinity, optional
        Pod affinity is a group of inter pod affinity scheduling rules.
    podAntiAffinity : ValuesSchemaBackstageAffinityPodAntiAffinity, optional
        Pod anti affinity is a group of inter pod anti affinity scheduling rules.
    """

    nodeAffinity?: ValuesSchemaBackstageAffinityNodeAffinity
    podAffinity?: ValuesSchemaBackstageAffinityPodAffinity
    podAntiAffinity?: ValuesSchemaBackstageAffinityPodAntiAffinity

schema ValuesSchemaBackstageAffinityNodeAffinity:
    r"""
    Node affinity is a group of node affinity scheduling rules.

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [ValuesSchemaBackstageAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], optional
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : ValuesSchemaBackstageAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution, optional
        A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
    """

    preferredDuringSchedulingIgnoredDuringExecution?: [ValuesSchemaBackstageAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]
    requiredDuringSchedulingIgnoredDuringExecution?: ValuesSchemaBackstageAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution

schema ValuesSchemaBackstageAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).

    Attributes
    ----------
    preference : ValuesSchemaBackstageAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference, required
        A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
    weight : int, required
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
    """

    preference: ValuesSchemaBackstageAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference
    weight: int

schema ValuesSchemaBackstageAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0Preference:
    r"""
    A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.

    Attributes
    ----------
    matchExpressions : [ValuesSchemaBackstageAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0], optional
        A list of node selector requirements by node's labels.
    matchFields : [ValuesSchemaBackstageAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0], optional
        A list of node selector requirements by node's fields.
    """

    matchExpressions?: [ValuesSchemaBackstageAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0]
    matchFields?: [ValuesSchemaBackstageAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0]

schema ValuesSchemaBackstageAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchExpressionsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, required
        The label key that the selector applies to.
    operator : str, required
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], optional
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    """

    key: str
    operator: str
    values?: [str]

schema ValuesSchemaBackstageAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PreferenceMatchFieldsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, required
        The label key that the selector applies to.
    operator : str, required
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], optional
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    """

    key: str
    operator: str
    values?: [str]

schema ValuesSchemaBackstageAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution:
    r"""
    A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.

    Attributes
    ----------
    nodeSelectorTerms : [ValuesSchemaBackstageAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0], required
        Required. A list of node selector terms. The terms are ORed.
    """

    nodeSelectorTerms: [ValuesSchemaBackstageAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0]

schema ValuesSchemaBackstageAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0:
    r"""
    A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.

    Attributes
    ----------
    matchExpressions : [ValuesSchemaBackstageAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0], optional
        A list of node selector requirements by node's labels.
    matchFields : [ValuesSchemaBackstageAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0], optional
        A list of node selector requirements by node's fields.
    """

    matchExpressions?: [ValuesSchemaBackstageAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0]
    matchFields?: [ValuesSchemaBackstageAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0]

schema ValuesSchemaBackstageAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchExpressionsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, required
        The label key that the selector applies to.
    operator : str, required
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], optional
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    """

    key: str
    operator: str
    values?: [str]

schema ValuesSchemaBackstageAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsItems0MatchFieldsItems0:
    r"""
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, required
        The label key that the selector applies to.
    operator : str, required
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
    values : [str], optional
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
    """

    key: str
    operator: str
    values?: [str]

schema ValuesSchemaBackstageAffinityPodAffinity:
    r"""
    Pod affinity is a group of inter pod affinity scheduling rules.

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], optional
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : [ValuesSchemaBackstageAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0], optional
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
    """

    preferredDuringSchedulingIgnoredDuringExecution?: [ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]
    requiredDuringSchedulingIgnoredDuringExecution?: [ValuesSchemaBackstageAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0]

schema ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)

    Attributes
    ----------
    podAffinityTerm : ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm, required
        Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
    weight : int, required
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
    """

    podAffinityTerm: ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm
    weight: int

schema ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm:
    r"""
    Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running

    Attributes
    ----------
    labelSelector : ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector, optional
        A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
    matchLabelKeys : [str], optional
        MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.
    mismatchLabelKeys : [str], optional
        MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
    namespaceSelector : ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector, optional
        A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
    namespaces : [str], optional
        namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    """

    labelSelector?: ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector:
    r"""
    A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.

    Attributes
    ----------
    matchExpressions : [ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0], optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchLabels, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    matchExpressions?: [ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0]
    matchLabels?: ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchLabels

schema ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, required
        key is the label key that the selector applies to.
    operator : str, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """

    key: str
    operator: str
    values?: [str]

schema ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchLabels:
    r"""
    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    [...str]: str

schema ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector:
    r"""
    A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.

    Attributes
    ----------
    matchExpressions : [ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0], optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchLabels, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    matchExpressions?: [ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0]
    matchLabels?: ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchLabels

schema ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, required
        key is the label key that the selector applies to.
    operator : str, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """

    key: str
    operator: str
    values?: [str]

schema ValuesSchemaBackstageAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchLabels:
    r"""
    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    [...str]: str

schema ValuesSchemaBackstageAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running

    Attributes
    ----------
    labelSelector : ValuesSchemaBackstageAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector, optional
        A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
    matchLabelKeys : [str], optional
        MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.
    mismatchLabelKeys : [str], optional
        MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
    namespaceSelector : ValuesSchemaBackstageAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector, optional
        A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
    namespaces : [str], optional
        namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    """

    labelSelector?: ValuesSchemaBackstageAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: ValuesSchemaBackstageAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema ValuesSchemaBackstageAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector:
    r"""
    A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.

    Attributes
    ----------
    matchExpressions : [ValuesSchemaBackstageAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0], optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : ValuesSchemaBackstageAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchLabels, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    matchExpressions?: [ValuesSchemaBackstageAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0]
    matchLabels?: ValuesSchemaBackstageAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchLabels

schema ValuesSchemaBackstageAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, required
        key is the label key that the selector applies to.
    operator : str, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """

    key: str
    operator: str
    values?: [str]

schema ValuesSchemaBackstageAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchLabels:
    r"""
    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    [...str]: str

schema ValuesSchemaBackstageAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector:
    r"""
    A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.

    Attributes
    ----------
    matchExpressions : [ValuesSchemaBackstageAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0], optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : ValuesSchemaBackstageAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchLabels, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    matchExpressions?: [ValuesSchemaBackstageAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0]
    matchLabels?: ValuesSchemaBackstageAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchLabels

schema ValuesSchemaBackstageAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, required
        key is the label key that the selector applies to.
    operator : str, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """

    key: str
    operator: str
    values?: [str]

schema ValuesSchemaBackstageAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchLabels:
    r"""
    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    [...str]: str

schema ValuesSchemaBackstageAffinityPodAntiAffinity:
    r"""
    Pod anti affinity is a group of inter pod anti affinity scheduling rules.

    Attributes
    ----------
    preferredDuringSchedulingIgnoredDuringExecution : [ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0], optional
        The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and subtracting "weight" from the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
    requiredDuringSchedulingIgnoredDuringExecution : [ValuesSchemaBackstageAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0], optional
        If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
    """

    preferredDuringSchedulingIgnoredDuringExecution?: [ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0]
    requiredDuringSchedulingIgnoredDuringExecution?: [ValuesSchemaBackstageAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0]

schema ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)

    Attributes
    ----------
    podAffinityTerm : ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm, required
        Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
    weight : int, required
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
    """

    podAffinityTerm: ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm
    weight: int

schema ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTerm:
    r"""
    Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running

    Attributes
    ----------
    labelSelector : ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector, optional
        A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
    matchLabelKeys : [str], optional
        MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.
    mismatchLabelKeys : [str], optional
        MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
    namespaceSelector : ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector, optional
        A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
    namespaces : [str], optional
        namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    """

    labelSelector?: ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelector:
    r"""
    A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.

    Attributes
    ----------
    matchExpressions : [ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0], optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchLabels, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    matchExpressions?: [ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0]
    matchLabels?: ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchLabels

schema ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, required
        key is the label key that the selector applies to.
    operator : str, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """

    key: str
    operator: str
    values?: [str]

schema ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermLabelSelectorMatchLabels:
    r"""
    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    [...str]: str

schema ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelector:
    r"""
    A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.

    Attributes
    ----------
    matchExpressions : [ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0], optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchLabels, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    matchExpressions?: [ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0]
    matchLabels?: ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchLabels

schema ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, required
        key is the label key that the selector applies to.
    operator : str, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """

    key: str
    operator: str
    values?: [str]

schema ValuesSchemaBackstageAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionItems0PodAffinityTermNamespaceSelectorMatchLabels:
    r"""
    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    [...str]: str

schema ValuesSchemaBackstageAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0:
    r"""
    Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running

    Attributes
    ----------
    labelSelector : ValuesSchemaBackstageAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector, optional
        A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
    matchLabelKeys : [str], optional
        MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both matchLabelKeys and labelSelector. Also, matchLabelKeys cannot be set when labelSelector isn't set.
    mismatchLabelKeys : [str], optional
        MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both mismatchLabelKeys and labelSelector. Also, mismatchLabelKeys cannot be set when labelSelector isn't set.
    namespaceSelector : ValuesSchemaBackstageAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector, optional
        A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
    namespaces : [str], optional
        namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
    topologyKey : str, required
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
    """

    labelSelector?: ValuesSchemaBackstageAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector
    matchLabelKeys?: [str]
    mismatchLabelKeys?: [str]
    namespaceSelector?: ValuesSchemaBackstageAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector
    namespaces?: [str]
    topologyKey: str

schema ValuesSchemaBackstageAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelector:
    r"""
    A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.

    Attributes
    ----------
    matchExpressions : [ValuesSchemaBackstageAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0], optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : ValuesSchemaBackstageAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchLabels, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    matchExpressions?: [ValuesSchemaBackstageAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0]
    matchLabels?: ValuesSchemaBackstageAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchLabels

schema ValuesSchemaBackstageAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, required
        key is the label key that the selector applies to.
    operator : str, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """

    key: str
    operator: str
    values?: [str]

schema ValuesSchemaBackstageAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0LabelSelectorMatchLabels:
    r"""
    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    [...str]: str

schema ValuesSchemaBackstageAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelector:
    r"""
    A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.

    Attributes
    ----------
    matchExpressions : [ValuesSchemaBackstageAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0], optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : ValuesSchemaBackstageAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchLabels, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    matchExpressions?: [ValuesSchemaBackstageAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0]
    matchLabels?: ValuesSchemaBackstageAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchLabels

schema ValuesSchemaBackstageAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, required
        key is the label key that the selector applies to.
    operator : str, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """

    key: str
    operator: str
    values?: [str]

schema ValuesSchemaBackstageAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionItems0NamespaceSelectorMatchLabels:
    r"""
    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    [...str]: str

schema ValuesSchemaBackstageAnnotations:
    r"""
    ValuesSchemaBackstageAnnotations
    """

    [...str]: str

schema ValuesSchemaBackstageContainerPorts:
    r"""
    ValuesSchemaBackstageContainerPorts

    Attributes
    ----------
    backend : int, optional, default is 7007
    """

    backend?: int = 7007

schema ValuesSchemaBackstageContainerSecurityContext:
    r"""
    SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.

    Attributes
    ----------
    allowPrivilegeEscalation : bool, optional
        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
    appArmorProfile : ValuesSchemaBackstageContainerSecurityContextAppArmorProfile, optional
        AppArmorProfile defines a pod or container's AppArmor settings.
    capabilities : ValuesSchemaBackstageContainerSecurityContextCapabilities, optional
        Adds and removes POSIX capabilities from running containers.
    privileged : bool, optional
        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
    procMount : str, optional
        procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
    readOnlyRootFilesystem : bool, optional
        Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
    runAsGroup : int, optional
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
    runAsNonRoot : bool, optional
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    runAsUser : int, optional
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
    seLinuxOptions : ValuesSchemaBackstageContainerSecurityContextSeLinuxOptions, optional
        SELinuxOptions are the labels to be applied to the container
    seccompProfile : ValuesSchemaBackstageContainerSecurityContextSeccompProfile, optional
        SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
    windowsOptions : ValuesSchemaBackstageContainerSecurityContextWindowsOptions, optional
        WindowsSecurityContextOptions contain Windows-specific options and credentials.
    """

    allowPrivilegeEscalation?: bool
    appArmorProfile?: ValuesSchemaBackstageContainerSecurityContextAppArmorProfile
    capabilities?: ValuesSchemaBackstageContainerSecurityContextCapabilities
    privileged?: bool
    procMount?: str
    readOnlyRootFilesystem?: bool
    runAsGroup?: int
    runAsNonRoot?: bool
    runAsUser?: int
    seLinuxOptions?: ValuesSchemaBackstageContainerSecurityContextSeLinuxOptions
    seccompProfile?: ValuesSchemaBackstageContainerSecurityContextSeccompProfile
    windowsOptions?: ValuesSchemaBackstageContainerSecurityContextWindowsOptions

schema ValuesSchemaBackstageContainerSecurityContextAppArmorProfile:
    r"""
    AppArmorProfile defines a pod or container's AppArmor settings.

    Attributes
    ----------
    localhostProfile : str, optional
        localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is "Localhost".
    $type : str, required
        type indicates which kind of AppArmor profile will be applied. Valid options are:
          Localhost - a profile pre-loaded on the node.
          RuntimeDefault - the container runtime's default profile.
          Unconfined - no AppArmor enforcement.
    """

    localhostProfile?: str
    $type: str

schema ValuesSchemaBackstageContainerSecurityContextCapabilities:
    r"""
    Adds and removes POSIX capabilities from running containers.

    Attributes
    ----------
    add : [str], optional
        Added capabilities
    drop : [str], optional
        Removed capabilities
    """

    add?: [str]
    drop?: [str]

schema ValuesSchemaBackstageContainerSecurityContextSeLinuxOptions:
    r"""
    SELinuxOptions are the labels to be applied to the container

    Attributes
    ----------
    level : str, optional
        Level is SELinux level label that applies to the container.
    role : str, optional
        Role is a SELinux role label that applies to the container.
    $type : str, optional
        Type is a SELinux type label that applies to the container.
    user : str, optional
        User is a SELinux user label that applies to the container.
    """

    level?: str
    role?: str
    $type?: str
    user?: str

schema ValuesSchemaBackstageContainerSecurityContextSeccompProfile:
    r"""
    SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.

    Attributes
    ----------
    localhostProfile : str, optional
        localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
    $type : str, required
        type indicates which kind of seccomp profile will be applied. Valid options are:

        Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
    """

    localhostProfile?: str
    $type: str

schema ValuesSchemaBackstageContainerSecurityContextWindowsOptions:
    r"""
    WindowsSecurityContextOptions contain Windows-specific options and credentials.

    Attributes
    ----------
    gmsaCredentialSpec : str, optional
        GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
    gmsaCredentialSpecName : str, optional
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
    hostProcess : bool, optional
        HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
    runAsUserName : str, optional
        The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    """

    gmsaCredentialSpec?: str
    gmsaCredentialSpecName?: str
    hostProcess?: bool
    runAsUserName?: str

schema ValuesSchemaBackstageExtraAppConfigItems0:
    r"""
    ValuesSchemaBackstageExtraAppConfigItems0

    Attributes
    ----------
    configMapRef : str, optional
    filename : str, optional
    """

    configMapRef?: str
    filename?: str

schema ValuesSchemaBackstageExtraContainersItems0:
    r"""
    A single application container that you want to run within a pod.

    Attributes
    ----------
    args : [str], optional
        Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    command : [str], optional
        Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    env : [ValuesSchemaBackstageExtraContainersItems0EnvItems0], optional
        List of environment variables to set in the container. Cannot be updated.
    envFrom : [ValuesSchemaBackstageExtraContainersItems0EnvFromItems0], optional
        List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
    image : str, optional
        Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
    imagePullPolicy : str, optional
        Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    lifecycle : ValuesSchemaBackstageExtraContainersItems0Lifecycle, optional
        Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
    livenessProbe : ValuesSchemaBackstageExtraContainersItems0LivenessProbe, optional
        Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
    name : str, required
        Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
    ports : [ValuesSchemaBackstageExtraContainersItems0PortsItems0], optional
        List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
    readinessProbe : ValuesSchemaBackstageExtraContainersItems0ReadinessProbe, optional
        Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
    resizePolicy : [ValuesSchemaBackstageExtraContainersItems0ResizePolicyItems0], optional
        Resources resize policy for the container.
    resources : ValuesSchemaBackstageExtraContainersItems0Resources, optional
        ResourceRequirements describes the compute resource requirements.
    restartPolicy : str, optional
        RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is "Always". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as "Always" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy "Always" will be shut down. This lifecycle differs from normal init containers and is often referred to as a "sidecar" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.
    securityContext : ValuesSchemaBackstageExtraContainersItems0SecurityContext, optional
        SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
    startupProbe : ValuesSchemaBackstageExtraContainersItems0StartupProbe, optional
        Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
    stdin : bool, optional
        Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
    stdinOnce : bool, optional
        Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
    terminationMessagePath : str, optional
        Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
    terminationMessagePolicy : str, optional
        Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
    tty : bool, optional
        Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
    volumeDevices : [ValuesSchemaBackstageExtraContainersItems0VolumeDevicesItems0], optional
        volumeDevices is the list of block devices to be used by the container.
    volumeMounts : [ValuesSchemaBackstageExtraContainersItems0VolumeMountsItems0], optional
        Pod volumes to mount into the container's filesystem. Cannot be updated.
    workingDir : str, optional
        Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
    """

    args?: [str]
    command?: [str]
    env?: [ValuesSchemaBackstageExtraContainersItems0EnvItems0]
    envFrom?: [ValuesSchemaBackstageExtraContainersItems0EnvFromItems0]
    image?: str
    imagePullPolicy?: str
    lifecycle?: ValuesSchemaBackstageExtraContainersItems0Lifecycle
    livenessProbe?: ValuesSchemaBackstageExtraContainersItems0LivenessProbe
    name: str
    ports?: [ValuesSchemaBackstageExtraContainersItems0PortsItems0]
    readinessProbe?: ValuesSchemaBackstageExtraContainersItems0ReadinessProbe
    resizePolicy?: [ValuesSchemaBackstageExtraContainersItems0ResizePolicyItems0]
    resources?: ValuesSchemaBackstageExtraContainersItems0Resources
    restartPolicy?: str
    securityContext?: ValuesSchemaBackstageExtraContainersItems0SecurityContext
    startupProbe?: ValuesSchemaBackstageExtraContainersItems0StartupProbe
    stdin?: bool
    stdinOnce?: bool
    terminationMessagePath?: str
    terminationMessagePolicy?: str
    tty?: bool
    volumeDevices?: [ValuesSchemaBackstageExtraContainersItems0VolumeDevicesItems0]
    volumeMounts?: [ValuesSchemaBackstageExtraContainersItems0VolumeMountsItems0]
    workingDir?: str

schema ValuesSchemaBackstageExtraContainersItems0EnvFromItems0:
    r"""
    EnvFromSource represents the source of a set of ConfigMaps or Secrets

    Attributes
    ----------
    configMapRef : ValuesSchemaBackstageExtraContainersItems0EnvFromItems0ConfigMapRef, optional
        ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.

        The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
    prefix : str, optional
        Optional text to prepend to the name of each environment variable. Must be a C_IDENTIFIER.
    secretRef : ValuesSchemaBackstageExtraContainersItems0EnvFromItems0SecretRef, optional
        SecretEnvSource selects a Secret to populate the environment variables with.

        The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
    """

    configMapRef?: ValuesSchemaBackstageExtraContainersItems0EnvFromItems0ConfigMapRef
    prefix?: str
    secretRef?: ValuesSchemaBackstageExtraContainersItems0EnvFromItems0SecretRef

schema ValuesSchemaBackstageExtraContainersItems0EnvFromItems0ConfigMapRef:
    r"""
    ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.

    The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.

    Attributes
    ----------
    name : str, optional
        Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, optional
        Specify whether the ConfigMap must be defined
    """

    name?: str
    optional?: bool

schema ValuesSchemaBackstageExtraContainersItems0EnvFromItems0SecretRef:
    r"""
    SecretEnvSource selects a Secret to populate the environment variables with.

    The contents of the target Secret's Data field will represent the key-value pairs as environment variables.

    Attributes
    ----------
    name : str, optional
        Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, optional
        Specify whether the Secret must be defined
    """

    name?: str
    optional?: bool

schema ValuesSchemaBackstageExtraContainersItems0EnvItems0:
    r"""
    EnvVar represents an environment variable present in a Container.

    Attributes
    ----------
    name : str, required
        Name of the environment variable. Must be a C_IDENTIFIER.
    value : str, optional
        Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
    valueFrom : ValuesSchemaBackstageExtraContainersItems0EnvItems0ValueFrom, optional
        EnvVarSource represents a source for the value of an EnvVar.
    """

    name: str
    value?: str
    valueFrom?: ValuesSchemaBackstageExtraContainersItems0EnvItems0ValueFrom

schema ValuesSchemaBackstageExtraContainersItems0EnvItems0ValueFrom:
    r"""
    EnvVarSource represents a source for the value of an EnvVar.

    Attributes
    ----------
    configMapKeyRef : ValuesSchemaBackstageExtraContainersItems0EnvItems0ValueFromConfigMapKeyRef, optional
        Selects a key from a ConfigMap.
    fieldRef : ValuesSchemaBackstageExtraContainersItems0EnvItems0ValueFromFieldRef, optional
        ObjectFieldSelector selects an APIVersioned field of an object.
    resourceFieldRef : ValuesSchemaBackstageExtraContainersItems0EnvItems0ValueFromResourceFieldRef, optional
        ResourceFieldSelector represents container resources (cpu, memory) and their output format
    secretKeyRef : ValuesSchemaBackstageExtraContainersItems0EnvItems0ValueFromSecretKeyRef, optional
        SecretKeySelector selects a key of a Secret.
    """

    configMapKeyRef?: ValuesSchemaBackstageExtraContainersItems0EnvItems0ValueFromConfigMapKeyRef
    fieldRef?: ValuesSchemaBackstageExtraContainersItems0EnvItems0ValueFromFieldRef
    resourceFieldRef?: ValuesSchemaBackstageExtraContainersItems0EnvItems0ValueFromResourceFieldRef
    secretKeyRef?: ValuesSchemaBackstageExtraContainersItems0EnvItems0ValueFromSecretKeyRef

schema ValuesSchemaBackstageExtraContainersItems0EnvItems0ValueFromConfigMapKeyRef:
    r"""
    Selects a key from a ConfigMap.

    Attributes
    ----------
    key : str, required
        The key to select.
    name : str, optional
        Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, optional
        Specify whether the ConfigMap or its key must be defined
    """

    key: str
    name?: str
    optional?: bool

schema ValuesSchemaBackstageExtraContainersItems0EnvItems0ValueFromFieldRef:
    r"""
    ObjectFieldSelector selects an APIVersioned field of an object.

    Attributes
    ----------
    apiVersion : str, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, required
        Path of the field to select in the specified API version.
    """

    apiVersion?: str
    fieldPath: str

schema ValuesSchemaBackstageExtraContainersItems0EnvItems0ValueFromResourceFieldRef:
    r"""
    ResourceFieldSelector represents container resources (cpu, memory) and their output format

    Attributes
    ----------
    containerName : str, optional
        Container name: required for volumes, optional for env vars
    divisor : str | float, optional
    resource : str, required
        Required: resource to select
    """

    containerName?: str
    divisor?: str | float
    resource: str

schema ValuesSchemaBackstageExtraContainersItems0EnvItems0ValueFromSecretKeyRef:
    r"""
    SecretKeySelector selects a key of a Secret.

    Attributes
    ----------
    key : str, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, optional
        Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, optional
        Specify whether the Secret or its key must be defined
    """

    key: str
    name?: str
    optional?: bool

schema ValuesSchemaBackstageExtraContainersItems0Lifecycle:
    r"""
    Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.

    Attributes
    ----------
    postStart : ValuesSchemaBackstageExtraContainersItems0LifecyclePostStart, optional
        LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
    preStop : ValuesSchemaBackstageExtraContainersItems0LifecyclePreStop, optional
        LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
    stopSignal : str, optional
        StopSignal defines which signal will be sent to a container when it is being stopped. If not specified, the default is defined by the container runtime in use. StopSignal can only be set for Pods with a non-empty .spec.os.name
    """

    postStart?: ValuesSchemaBackstageExtraContainersItems0LifecyclePostStart
    preStop?: ValuesSchemaBackstageExtraContainersItems0LifecyclePreStop
    stopSignal?: str

schema ValuesSchemaBackstageExtraContainersItems0LifecyclePostStart:
    r"""
    LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.

    Attributes
    ----------
    exec : ValuesSchemaBackstageExtraContainersItems0LifecyclePostStartExec, optional
        ExecAction describes a "run in container" action.
    httpGet : ValuesSchemaBackstageExtraContainersItems0LifecyclePostStartHttpGet, optional
        HTTPGetAction describes an action based on HTTP Get requests.
    sleep : ValuesSchemaBackstageExtraContainersItems0LifecyclePostStartSleep, optional
        SleepAction describes a "sleep" action.
    tcpSocket : ValuesSchemaBackstageExtraContainersItems0LifecyclePostStartTcpSocket, optional
        TCPSocketAction describes an action based on opening a socket
    """

    exec?: ValuesSchemaBackstageExtraContainersItems0LifecyclePostStartExec
    httpGet?: ValuesSchemaBackstageExtraContainersItems0LifecyclePostStartHttpGet
    sleep?: ValuesSchemaBackstageExtraContainersItems0LifecyclePostStartSleep
    tcpSocket?: ValuesSchemaBackstageExtraContainersItems0LifecyclePostStartTcpSocket

schema ValuesSchemaBackstageExtraContainersItems0LifecyclePostStartExec:
    r"""
    ExecAction describes a "run in container" action.

    Attributes
    ----------
    command : [str], optional
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """

    command?: [str]

schema ValuesSchemaBackstageExtraContainersItems0LifecyclePostStartHttpGet:
    r"""
    HTTPGetAction describes an action based on HTTP Get requests.

    Attributes
    ----------
    host : str, optional
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    httpHeaders : [ValuesSchemaBackstageExtraContainersItems0LifecyclePostStartHttpGetHttpHeadersItems0], optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, optional
        Path to access on the HTTP server.
    port : str | int, required
    scheme : str, optional
        Scheme to use for connecting to the host. Defaults to HTTP.
    """

    host?: str
    httpHeaders?: [ValuesSchemaBackstageExtraContainersItems0LifecyclePostStartHttpGetHttpHeadersItems0]
    path?: str
    port: str | int
    scheme?: str

schema ValuesSchemaBackstageExtraContainersItems0LifecyclePostStartHttpGetHttpHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, required
        The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, required
        The header field value
    """

    name: str
    value: str

schema ValuesSchemaBackstageExtraContainersItems0LifecyclePostStartSleep:
    r"""
    SleepAction describes a "sleep" action.

    Attributes
    ----------
    seconds : int, required
        Seconds is the number of seconds to sleep.
    """

    seconds: int

schema ValuesSchemaBackstageExtraContainersItems0LifecyclePostStartTcpSocket:
    r"""
    TCPSocketAction describes an action based on opening a socket

    Attributes
    ----------
    host : str, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : str | int, required
    """

    host?: str
    port: str | int

schema ValuesSchemaBackstageExtraContainersItems0LifecyclePreStop:
    r"""
    LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.

    Attributes
    ----------
    exec : ValuesSchemaBackstageExtraContainersItems0LifecyclePreStopExec, optional
        ExecAction describes a "run in container" action.
    httpGet : ValuesSchemaBackstageExtraContainersItems0LifecyclePreStopHttpGet, optional
        HTTPGetAction describes an action based on HTTP Get requests.
    sleep : ValuesSchemaBackstageExtraContainersItems0LifecyclePreStopSleep, optional
        SleepAction describes a "sleep" action.
    tcpSocket : ValuesSchemaBackstageExtraContainersItems0LifecyclePreStopTcpSocket, optional
        TCPSocketAction describes an action based on opening a socket
    """

    exec?: ValuesSchemaBackstageExtraContainersItems0LifecyclePreStopExec
    httpGet?: ValuesSchemaBackstageExtraContainersItems0LifecyclePreStopHttpGet
    sleep?: ValuesSchemaBackstageExtraContainersItems0LifecyclePreStopSleep
    tcpSocket?: ValuesSchemaBackstageExtraContainersItems0LifecyclePreStopTcpSocket

schema ValuesSchemaBackstageExtraContainersItems0LifecyclePreStopExec:
    r"""
    ExecAction describes a "run in container" action.

    Attributes
    ----------
    command : [str], optional
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """

    command?: [str]

schema ValuesSchemaBackstageExtraContainersItems0LifecyclePreStopHttpGet:
    r"""
    HTTPGetAction describes an action based on HTTP Get requests.

    Attributes
    ----------
    host : str, optional
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    httpHeaders : [ValuesSchemaBackstageExtraContainersItems0LifecyclePreStopHttpGetHttpHeadersItems0], optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, optional
        Path to access on the HTTP server.
    port : str | int, required
    scheme : str, optional
        Scheme to use for connecting to the host. Defaults to HTTP.
    """

    host?: str
    httpHeaders?: [ValuesSchemaBackstageExtraContainersItems0LifecyclePreStopHttpGetHttpHeadersItems0]
    path?: str
    port: str | int
    scheme?: str

schema ValuesSchemaBackstageExtraContainersItems0LifecyclePreStopHttpGetHttpHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, required
        The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, required
        The header field value
    """

    name: str
    value: str

schema ValuesSchemaBackstageExtraContainersItems0LifecyclePreStopSleep:
    r"""
    SleepAction describes a "sleep" action.

    Attributes
    ----------
    seconds : int, required
        Seconds is the number of seconds to sleep.
    """

    seconds: int

schema ValuesSchemaBackstageExtraContainersItems0LifecyclePreStopTcpSocket:
    r"""
    TCPSocketAction describes an action based on opening a socket

    Attributes
    ----------
    host : str, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : str | int, required
    """

    host?: str
    port: str | int

schema ValuesSchemaBackstageExtraContainersItems0LivenessProbe:
    r"""
    Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.

    Attributes
    ----------
    exec : ValuesSchemaBackstageExtraContainersItems0LivenessProbeExec, optional
        ExecAction describes a "run in container" action.
    failureThreshold : int, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    grpc : ValuesSchemaBackstageExtraContainersItems0LivenessProbeGrpc, optional
        GRPCAction specifies an action involving a GRPC service.
    httpGet : ValuesSchemaBackstageExtraContainersItems0LivenessProbeHttpGet, optional
        HTTPGetAction describes an action based on HTTP Get requests.
    initialDelaySeconds : int, optional
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, optional
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    successThreshold : int, optional
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : ValuesSchemaBackstageExtraContainersItems0LivenessProbeTcpSocket, optional
        TCPSocketAction describes an action based on opening a socket
    terminationGracePeriodSeconds : int, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, optional
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """

    exec?: ValuesSchemaBackstageExtraContainersItems0LivenessProbeExec
    failureThreshold?: int
    grpc?: ValuesSchemaBackstageExtraContainersItems0LivenessProbeGrpc
    httpGet?: ValuesSchemaBackstageExtraContainersItems0LivenessProbeHttpGet
    initialDelaySeconds?: int
    periodSeconds?: int
    successThreshold?: int
    tcpSocket?: ValuesSchemaBackstageExtraContainersItems0LivenessProbeTcpSocket
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema ValuesSchemaBackstageExtraContainersItems0LivenessProbeExec:
    r"""
    ExecAction describes a "run in container" action.

    Attributes
    ----------
    command : [str], optional
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """

    command?: [str]

schema ValuesSchemaBackstageExtraContainersItems0LivenessProbeGrpc:
    r"""
    GRPCAction specifies an action involving a GRPC service.

    Attributes
    ----------
    port : int, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """

    port: int
    service?: str

schema ValuesSchemaBackstageExtraContainersItems0LivenessProbeHttpGet:
    r"""
    HTTPGetAction describes an action based on HTTP Get requests.

    Attributes
    ----------
    host : str, optional
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    httpHeaders : [ValuesSchemaBackstageExtraContainersItems0LivenessProbeHttpGetHttpHeadersItems0], optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, optional
        Path to access on the HTTP server.
    port : str | int, required
    scheme : str, optional
        Scheme to use for connecting to the host. Defaults to HTTP.
    """

    host?: str
    httpHeaders?: [ValuesSchemaBackstageExtraContainersItems0LivenessProbeHttpGetHttpHeadersItems0]
    path?: str
    port: str | int
    scheme?: str

schema ValuesSchemaBackstageExtraContainersItems0LivenessProbeHttpGetHttpHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, required
        The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, required
        The header field value
    """

    name: str
    value: str

schema ValuesSchemaBackstageExtraContainersItems0LivenessProbeTcpSocket:
    r"""
    TCPSocketAction describes an action based on opening a socket

    Attributes
    ----------
    host : str, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : str | int, required
    """

    host?: str
    port: str | int

schema ValuesSchemaBackstageExtraContainersItems0PortsItems0:
    r"""
    ContainerPort represents a network port in a single container.

    Attributes
    ----------
    containerPort : int, required
        Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
    hostIP : str, optional
        What host IP to bind the external port to.
    hostPort : int, optional
        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
    name : str, optional
        If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
    $protocol : str, optional
        Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
    """

    containerPort: int
    hostIP?: str
    hostPort?: int
    name?: str
    $protocol?: str

schema ValuesSchemaBackstageExtraContainersItems0ReadinessProbe:
    r"""
    Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.

    Attributes
    ----------
    exec : ValuesSchemaBackstageExtraContainersItems0ReadinessProbeExec, optional
        ExecAction describes a "run in container" action.
    failureThreshold : int, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    grpc : ValuesSchemaBackstageExtraContainersItems0ReadinessProbeGrpc, optional
        GRPCAction specifies an action involving a GRPC service.
    httpGet : ValuesSchemaBackstageExtraContainersItems0ReadinessProbeHttpGet, optional
        HTTPGetAction describes an action based on HTTP Get requests.
    initialDelaySeconds : int, optional
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, optional
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    successThreshold : int, optional
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : ValuesSchemaBackstageExtraContainersItems0ReadinessProbeTcpSocket, optional
        TCPSocketAction describes an action based on opening a socket
    terminationGracePeriodSeconds : int, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, optional
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """

    exec?: ValuesSchemaBackstageExtraContainersItems0ReadinessProbeExec
    failureThreshold?: int
    grpc?: ValuesSchemaBackstageExtraContainersItems0ReadinessProbeGrpc
    httpGet?: ValuesSchemaBackstageExtraContainersItems0ReadinessProbeHttpGet
    initialDelaySeconds?: int
    periodSeconds?: int
    successThreshold?: int
    tcpSocket?: ValuesSchemaBackstageExtraContainersItems0ReadinessProbeTcpSocket
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema ValuesSchemaBackstageExtraContainersItems0ReadinessProbeExec:
    r"""
    ExecAction describes a "run in container" action.

    Attributes
    ----------
    command : [str], optional
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """

    command?: [str]

schema ValuesSchemaBackstageExtraContainersItems0ReadinessProbeGrpc:
    r"""
    GRPCAction specifies an action involving a GRPC service.

    Attributes
    ----------
    port : int, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """

    port: int
    service?: str

schema ValuesSchemaBackstageExtraContainersItems0ReadinessProbeHttpGet:
    r"""
    HTTPGetAction describes an action based on HTTP Get requests.

    Attributes
    ----------
    host : str, optional
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    httpHeaders : [ValuesSchemaBackstageExtraContainersItems0ReadinessProbeHttpGetHttpHeadersItems0], optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, optional
        Path to access on the HTTP server.
    port : str | int, required
    scheme : str, optional
        Scheme to use for connecting to the host. Defaults to HTTP.
    """

    host?: str
    httpHeaders?: [ValuesSchemaBackstageExtraContainersItems0ReadinessProbeHttpGetHttpHeadersItems0]
    path?: str
    port: str | int
    scheme?: str

schema ValuesSchemaBackstageExtraContainersItems0ReadinessProbeHttpGetHttpHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, required
        The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, required
        The header field value
    """

    name: str
    value: str

schema ValuesSchemaBackstageExtraContainersItems0ReadinessProbeTcpSocket:
    r"""
    TCPSocketAction describes an action based on opening a socket

    Attributes
    ----------
    host : str, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : str | int, required
    """

    host?: str
    port: str | int

schema ValuesSchemaBackstageExtraContainersItems0ResizePolicyItems0:
    r"""
    ContainerResizePolicy represents resource resize policy for the container.

    Attributes
    ----------
    resourceName : str, required
        Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
    restartPolicy : str, required
        Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
    """

    resourceName: str
    restartPolicy: str

schema ValuesSchemaBackstageExtraContainersItems0Resources:
    r"""
    ResourceRequirements describes the compute resource requirements.

    Attributes
    ----------
    claims : [ValuesSchemaBackstageExtraContainersItems0ResourcesClaimsItems0], optional
        Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.

        This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.

        This field is immutable. It can only be set for containers.
    limits : ValuesSchemaBackstageExtraContainersItems0ResourcesLimits, optional
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : ValuesSchemaBackstageExtraContainersItems0ResourcesRequests, optional
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """

    claims?: [ValuesSchemaBackstageExtraContainersItems0ResourcesClaimsItems0]
    limits?: ValuesSchemaBackstageExtraContainersItems0ResourcesLimits
    requests?: ValuesSchemaBackstageExtraContainersItems0ResourcesRequests

schema ValuesSchemaBackstageExtraContainersItems0ResourcesClaimsItems0:
    r"""
    ResourceClaim references one entry in PodSpec.ResourceClaims.

    Attributes
    ----------
    name : str, required
        Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    request : str, optional
        Request is the name chosen for a request in the referenced claim. If empty, everything from the claim is made available, otherwise only the result of this request.
    """

    name: str
    request?: str

schema ValuesSchemaBackstageExtraContainersItems0ResourcesLimits:
    r"""
    Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """

    [...str]: str | float

schema ValuesSchemaBackstageExtraContainersItems0ResourcesRequests:
    r"""
    Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """

    [...str]: str | float

schema ValuesSchemaBackstageExtraContainersItems0SecurityContext:
    r"""
    SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.

    Attributes
    ----------
    allowPrivilegeEscalation : bool, optional
        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
    appArmorProfile : ValuesSchemaBackstageExtraContainersItems0SecurityContextAppArmorProfile, optional
        AppArmorProfile defines a pod or container's AppArmor settings.
    capabilities : ValuesSchemaBackstageExtraContainersItems0SecurityContextCapabilities, optional
        Adds and removes POSIX capabilities from running containers.
    privileged : bool, optional
        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
    procMount : str, optional
        procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
    readOnlyRootFilesystem : bool, optional
        Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
    runAsGroup : int, optional
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
    runAsNonRoot : bool, optional
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    runAsUser : int, optional
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
    seLinuxOptions : ValuesSchemaBackstageExtraContainersItems0SecurityContextSeLinuxOptions, optional
        SELinuxOptions are the labels to be applied to the container
    seccompProfile : ValuesSchemaBackstageExtraContainersItems0SecurityContextSeccompProfile, optional
        SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
    windowsOptions : ValuesSchemaBackstageExtraContainersItems0SecurityContextWindowsOptions, optional
        WindowsSecurityContextOptions contain Windows-specific options and credentials.
    """

    allowPrivilegeEscalation?: bool
    appArmorProfile?: ValuesSchemaBackstageExtraContainersItems0SecurityContextAppArmorProfile
    capabilities?: ValuesSchemaBackstageExtraContainersItems0SecurityContextCapabilities
    privileged?: bool
    procMount?: str
    readOnlyRootFilesystem?: bool
    runAsGroup?: int
    runAsNonRoot?: bool
    runAsUser?: int
    seLinuxOptions?: ValuesSchemaBackstageExtraContainersItems0SecurityContextSeLinuxOptions
    seccompProfile?: ValuesSchemaBackstageExtraContainersItems0SecurityContextSeccompProfile
    windowsOptions?: ValuesSchemaBackstageExtraContainersItems0SecurityContextWindowsOptions

schema ValuesSchemaBackstageExtraContainersItems0SecurityContextAppArmorProfile:
    r"""
    AppArmorProfile defines a pod or container's AppArmor settings.

    Attributes
    ----------
    localhostProfile : str, optional
        localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is "Localhost".
    $type : str, required
        type indicates which kind of AppArmor profile will be applied. Valid options are:
          Localhost - a profile pre-loaded on the node.
          RuntimeDefault - the container runtime's default profile.
          Unconfined - no AppArmor enforcement.
    """

    localhostProfile?: str
    $type: str

schema ValuesSchemaBackstageExtraContainersItems0SecurityContextCapabilities:
    r"""
    Adds and removes POSIX capabilities from running containers.

    Attributes
    ----------
    add : [str], optional
        Added capabilities
    drop : [str], optional
        Removed capabilities
    """

    add?: [str]
    drop?: [str]

schema ValuesSchemaBackstageExtraContainersItems0SecurityContextSeLinuxOptions:
    r"""
    SELinuxOptions are the labels to be applied to the container

    Attributes
    ----------
    level : str, optional
        Level is SELinux level label that applies to the container.
    role : str, optional
        Role is a SELinux role label that applies to the container.
    $type : str, optional
        Type is a SELinux type label that applies to the container.
    user : str, optional
        User is a SELinux user label that applies to the container.
    """

    level?: str
    role?: str
    $type?: str
    user?: str

schema ValuesSchemaBackstageExtraContainersItems0SecurityContextSeccompProfile:
    r"""
    SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.

    Attributes
    ----------
    localhostProfile : str, optional
        localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
    $type : str, required
        type indicates which kind of seccomp profile will be applied. Valid options are:

        Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
    """

    localhostProfile?: str
    $type: str

schema ValuesSchemaBackstageExtraContainersItems0SecurityContextWindowsOptions:
    r"""
    WindowsSecurityContextOptions contain Windows-specific options and credentials.

    Attributes
    ----------
    gmsaCredentialSpec : str, optional
        GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
    gmsaCredentialSpecName : str, optional
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
    hostProcess : bool, optional
        HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
    runAsUserName : str, optional
        The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    """

    gmsaCredentialSpec?: str
    gmsaCredentialSpecName?: str
    hostProcess?: bool
    runAsUserName?: str

schema ValuesSchemaBackstageExtraContainersItems0StartupProbe:
    r"""
    Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.

    Attributes
    ----------
    exec : ValuesSchemaBackstageExtraContainersItems0StartupProbeExec, optional
        ExecAction describes a "run in container" action.
    failureThreshold : int, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    grpc : ValuesSchemaBackstageExtraContainersItems0StartupProbeGrpc, optional
        GRPCAction specifies an action involving a GRPC service.
    httpGet : ValuesSchemaBackstageExtraContainersItems0StartupProbeHttpGet, optional
        HTTPGetAction describes an action based on HTTP Get requests.
    initialDelaySeconds : int, optional
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, optional
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    successThreshold : int, optional
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : ValuesSchemaBackstageExtraContainersItems0StartupProbeTcpSocket, optional
        TCPSocketAction describes an action based on opening a socket
    terminationGracePeriodSeconds : int, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, optional
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """

    exec?: ValuesSchemaBackstageExtraContainersItems0StartupProbeExec
    failureThreshold?: int
    grpc?: ValuesSchemaBackstageExtraContainersItems0StartupProbeGrpc
    httpGet?: ValuesSchemaBackstageExtraContainersItems0StartupProbeHttpGet
    initialDelaySeconds?: int
    periodSeconds?: int
    successThreshold?: int
    tcpSocket?: ValuesSchemaBackstageExtraContainersItems0StartupProbeTcpSocket
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema ValuesSchemaBackstageExtraContainersItems0StartupProbeExec:
    r"""
    ExecAction describes a "run in container" action.

    Attributes
    ----------
    command : [str], optional
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """

    command?: [str]

schema ValuesSchemaBackstageExtraContainersItems0StartupProbeGrpc:
    r"""
    GRPCAction specifies an action involving a GRPC service.

    Attributes
    ----------
    port : int, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """

    port: int
    service?: str

schema ValuesSchemaBackstageExtraContainersItems0StartupProbeHttpGet:
    r"""
    HTTPGetAction describes an action based on HTTP Get requests.

    Attributes
    ----------
    host : str, optional
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    httpHeaders : [ValuesSchemaBackstageExtraContainersItems0StartupProbeHttpGetHttpHeadersItems0], optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, optional
        Path to access on the HTTP server.
    port : str | int, required
    scheme : str, optional
        Scheme to use for connecting to the host. Defaults to HTTP.
    """

    host?: str
    httpHeaders?: [ValuesSchemaBackstageExtraContainersItems0StartupProbeHttpGetHttpHeadersItems0]
    path?: str
    port: str | int
    scheme?: str

schema ValuesSchemaBackstageExtraContainersItems0StartupProbeHttpGetHttpHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, required
        The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, required
        The header field value
    """

    name: str
    value: str

schema ValuesSchemaBackstageExtraContainersItems0StartupProbeTcpSocket:
    r"""
    TCPSocketAction describes an action based on opening a socket

    Attributes
    ----------
    host : str, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : str | int, required
    """

    host?: str
    port: str | int

schema ValuesSchemaBackstageExtraContainersItems0VolumeDevicesItems0:
    r"""
    volumeDevice describes a mapping of a raw block device within a container.

    Attributes
    ----------
    devicePath : str, required
        devicePath is the path inside of the container that the device will be mapped to.
    name : str, required
        name must match the name of a persistentVolumeClaim in the pod
    """

    devicePath: str
    name: str

schema ValuesSchemaBackstageExtraContainersItems0VolumeMountsItems0:
    r"""
    VolumeMount describes a mounting of a Volume within a container.

    Attributes
    ----------
    mountPath : str, required
        Path within the container at which the volume should be mounted.  Must not contain ':'.
    mountPropagation : str, optional
        mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified (which defaults to None).
    name : str, required
        This must match the Name of a Volume.
    readOnly : bool, optional
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
    recursiveReadOnly : str, optional
        RecursiveReadOnly specifies whether read-only mounts should be handled recursively.

        If ReadOnly is false, this field has no meaning and must be unspecified.

        If ReadOnly is true, and this field is set to Disabled, the mount is not made recursively read-only.  If this field is set to IfPossible, the mount is made recursively read-only, if it is supported by the container runtime.  If this field is set to Enabled, the mount is made recursively read-only if it is supported by the container runtime, otherwise the pod will not be started and an error will be generated to indicate the reason.

        If this field is set to IfPossible or Enabled, MountPropagation must be set to None (or be unspecified, which defaults to None).

        If this field is not specified, it is treated as an equivalent of Disabled.
    subPath : str, optional
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
    subPathExpr : str, optional
        Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
    """

    mountPath: str
    mountPropagation?: str
    name: str
    readOnly?: bool
    recursiveReadOnly?: str
    subPath?: str
    subPathExpr?: str

schema ValuesSchemaBackstageExtraEnvVarsItems0:
    r"""
    EnvVar represents an environment variable present in a Container.

    Attributes
    ----------
    name : str, required
        Name of the environment variable. Must be a C_IDENTIFIER.
    value : str, optional
        Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
    valueFrom : ValuesSchemaBackstageExtraEnvVarsItems0ValueFrom, optional
        EnvVarSource represents a source for the value of an EnvVar.
    """

    name: str
    value?: str
    valueFrom?: ValuesSchemaBackstageExtraEnvVarsItems0ValueFrom

schema ValuesSchemaBackstageExtraEnvVarsItems0ValueFrom:
    r"""
    EnvVarSource represents a source for the value of an EnvVar.

    Attributes
    ----------
    configMapKeyRef : ValuesSchemaBackstageExtraEnvVarsItems0ValueFromConfigMapKeyRef, optional
        Selects a key from a ConfigMap.
    fieldRef : ValuesSchemaBackstageExtraEnvVarsItems0ValueFromFieldRef, optional
        ObjectFieldSelector selects an APIVersioned field of an object.
    resourceFieldRef : ValuesSchemaBackstageExtraEnvVarsItems0ValueFromResourceFieldRef, optional
        ResourceFieldSelector represents container resources (cpu, memory) and their output format
    secretKeyRef : ValuesSchemaBackstageExtraEnvVarsItems0ValueFromSecretKeyRef, optional
        SecretKeySelector selects a key of a Secret.
    """

    configMapKeyRef?: ValuesSchemaBackstageExtraEnvVarsItems0ValueFromConfigMapKeyRef
    fieldRef?: ValuesSchemaBackstageExtraEnvVarsItems0ValueFromFieldRef
    resourceFieldRef?: ValuesSchemaBackstageExtraEnvVarsItems0ValueFromResourceFieldRef
    secretKeyRef?: ValuesSchemaBackstageExtraEnvVarsItems0ValueFromSecretKeyRef

schema ValuesSchemaBackstageExtraEnvVarsItems0ValueFromConfigMapKeyRef:
    r"""
    Selects a key from a ConfigMap.

    Attributes
    ----------
    key : str, required
        The key to select.
    name : str, optional
        Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, optional
        Specify whether the ConfigMap or its key must be defined
    """

    key: str
    name?: str
    optional?: bool

schema ValuesSchemaBackstageExtraEnvVarsItems0ValueFromFieldRef:
    r"""
    ObjectFieldSelector selects an APIVersioned field of an object.

    Attributes
    ----------
    apiVersion : str, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, required
        Path of the field to select in the specified API version.
    """

    apiVersion?: str
    fieldPath: str

schema ValuesSchemaBackstageExtraEnvVarsItems0ValueFromResourceFieldRef:
    r"""
    ResourceFieldSelector represents container resources (cpu, memory) and their output format

    Attributes
    ----------
    containerName : str, optional
        Container name: required for volumes, optional for env vars
    divisor : str | float, optional
    resource : str, required
        Required: resource to select
    """

    containerName?: str
    divisor?: str | float
    resource: str

schema ValuesSchemaBackstageExtraEnvVarsItems0ValueFromSecretKeyRef:
    r"""
    SecretKeySelector selects a key of a Secret.

    Attributes
    ----------
    key : str, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, optional
        Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, optional
        Specify whether the Secret or its key must be defined
    """

    key: str
    name?: str
    optional?: bool

schema ValuesSchemaBackstageExtraPortsItems0:
    r"""
    ContainerPort represents a network port in a single container.

    Attributes
    ----------
    containerPort : int, required
        Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
    hostIP : str, optional
        What host IP to bind the external port to.
    hostPort : int, optional
        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
    name : str, optional
        If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
    $protocol : str, optional
        Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
    """

    containerPort: int
    hostIP?: str
    hostPort?: int
    name?: str
    $protocol?: str

schema ValuesSchemaBackstageExtraVolumeMountsItems0:
    r"""
    VolumeMount describes a mounting of a Volume within a container.

    Attributes
    ----------
    mountPath : str, required
        Path within the container at which the volume should be mounted.  Must not contain ':'.
    mountPropagation : str, optional
        mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified (which defaults to None).
    name : str, required
        This must match the Name of a Volume.
    readOnly : bool, optional
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
    recursiveReadOnly : str, optional
        RecursiveReadOnly specifies whether read-only mounts should be handled recursively.

        If ReadOnly is false, this field has no meaning and must be unspecified.

        If ReadOnly is true, and this field is set to Disabled, the mount is not made recursively read-only.  If this field is set to IfPossible, the mount is made recursively read-only, if it is supported by the container runtime.  If this field is set to Enabled, the mount is made recursively read-only if it is supported by the container runtime, otherwise the pod will not be started and an error will be generated to indicate the reason.

        If this field is set to IfPossible or Enabled, MountPropagation must be set to None (or be unspecified, which defaults to None).

        If this field is not specified, it is treated as an equivalent of Disabled.
    subPath : str, optional
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
    subPathExpr : str, optional
        Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
    """

    mountPath: str
    mountPropagation?: str
    name: str
    readOnly?: bool
    recursiveReadOnly?: str
    subPath?: str
    subPathExpr?: str

schema ValuesSchemaBackstageExtraVolumesItems0:
    r"""
    Volume represents a named volume in a pod that may be accessed by any container in the pod.

    Attributes
    ----------
    awsElasticBlockStore : ValuesSchemaBackstageExtraVolumesItems0AwsElasticBlockStore, optional
        Represents a Persistent Disk resource in AWS.

        An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
    azureDisk : ValuesSchemaBackstageExtraVolumesItems0AzureDisk, optional
        AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    azureFile : ValuesSchemaBackstageExtraVolumesItems0AzureFile, optional
        AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
    cephfs : ValuesSchemaBackstageExtraVolumesItems0Cephfs, optional
        Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
    cinder : ValuesSchemaBackstageExtraVolumesItems0Cinder, optional
        Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
    configMap : ValuesSchemaBackstageExtraVolumesItems0ConfigMap, optional
        Adapts a ConfigMap into a volume.

        The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
    csi : ValuesSchemaBackstageExtraVolumesItems0Csi, optional
        Represents a source location of a volume to mount, managed by an external CSI driver
    downwardAPI : ValuesSchemaBackstageExtraVolumesItems0DownwardApi, optional
        DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
    emptyDir : ValuesSchemaBackstageExtraVolumesItems0EmptyDir, optional
        Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
    ephemeral : ValuesSchemaBackstageExtraVolumesItems0Ephemeral, optional
        Represents an ephemeral volume that is handled by a normal storage driver.
    fc : ValuesSchemaBackstageExtraVolumesItems0Fc, optional
        Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
    flexVolume : ValuesSchemaBackstageExtraVolumesItems0FlexVolume, optional
        FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
    flocker : ValuesSchemaBackstageExtraVolumesItems0Flocker, optional
        Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
    gcePersistentDisk : ValuesSchemaBackstageExtraVolumesItems0GcePersistentDisk, optional
        Represents a Persistent Disk resource in Google Compute Engine.

        A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
    gitRepo : ValuesSchemaBackstageExtraVolumesItems0GitRepo, optional
        Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.

        DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
    glusterfs : ValuesSchemaBackstageExtraVolumesItems0Glusterfs, optional
        Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
    hostPath : ValuesSchemaBackstageExtraVolumesItems0HostPath, optional
        Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
    image : ValuesSchemaBackstageExtraVolumesItems0Image, optional
        ImageVolumeSource represents a image volume resource.
    iscsi : ValuesSchemaBackstageExtraVolumesItems0Iscsi, optional
        Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
    name : str, required
        name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    nfs : ValuesSchemaBackstageExtraVolumesItems0Nfs, optional
        Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
    persistentVolumeClaim : ValuesSchemaBackstageExtraVolumesItems0PersistentVolumeClaim, optional
        PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
    photonPersistentDisk : ValuesSchemaBackstageExtraVolumesItems0PhotonPersistentDisk, optional
        Represents a Photon Controller persistent disk resource.
    portworxVolume : ValuesSchemaBackstageExtraVolumesItems0PortworxVolume, optional
        PortworxVolumeSource represents a Portworx volume resource.
    projected : ValuesSchemaBackstageExtraVolumesItems0Projected, optional
        Represents a projected volume source
    quobyte : ValuesSchemaBackstageExtraVolumesItems0Quobyte, optional
        Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
    rbd : ValuesSchemaBackstageExtraVolumesItems0Rbd, optional
        Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
    scaleIO : ValuesSchemaBackstageExtraVolumesItems0ScaleIo, optional
        ScaleIOVolumeSource represents a persistent ScaleIO volume
    secret : ValuesSchemaBackstageExtraVolumesItems0Secret, optional
        Adapts a Secret into a volume.

        The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
    storageos : ValuesSchemaBackstageExtraVolumesItems0Storageos, optional
        Represents a StorageOS persistent volume resource.
    vsphereVolume : ValuesSchemaBackstageExtraVolumesItems0VsphereVolume, optional
        Represents a vSphere volume resource.
    """

    awsElasticBlockStore?: ValuesSchemaBackstageExtraVolumesItems0AwsElasticBlockStore
    azureDisk?: ValuesSchemaBackstageExtraVolumesItems0AzureDisk
    azureFile?: ValuesSchemaBackstageExtraVolumesItems0AzureFile
    cephfs?: ValuesSchemaBackstageExtraVolumesItems0Cephfs
    cinder?: ValuesSchemaBackstageExtraVolumesItems0Cinder
    configMap?: ValuesSchemaBackstageExtraVolumesItems0ConfigMap
    csi?: ValuesSchemaBackstageExtraVolumesItems0Csi
    downwardAPI?: ValuesSchemaBackstageExtraVolumesItems0DownwardApi
    emptyDir?: ValuesSchemaBackstageExtraVolumesItems0EmptyDir
    ephemeral?: ValuesSchemaBackstageExtraVolumesItems0Ephemeral
    fc?: ValuesSchemaBackstageExtraVolumesItems0Fc
    flexVolume?: ValuesSchemaBackstageExtraVolumesItems0FlexVolume
    flocker?: ValuesSchemaBackstageExtraVolumesItems0Flocker
    gcePersistentDisk?: ValuesSchemaBackstageExtraVolumesItems0GcePersistentDisk
    gitRepo?: ValuesSchemaBackstageExtraVolumesItems0GitRepo
    glusterfs?: ValuesSchemaBackstageExtraVolumesItems0Glusterfs
    hostPath?: ValuesSchemaBackstageExtraVolumesItems0HostPath
    image?: ValuesSchemaBackstageExtraVolumesItems0Image
    iscsi?: ValuesSchemaBackstageExtraVolumesItems0Iscsi
    name: str
    nfs?: ValuesSchemaBackstageExtraVolumesItems0Nfs
    persistentVolumeClaim?: ValuesSchemaBackstageExtraVolumesItems0PersistentVolumeClaim
    photonPersistentDisk?: ValuesSchemaBackstageExtraVolumesItems0PhotonPersistentDisk
    portworxVolume?: ValuesSchemaBackstageExtraVolumesItems0PortworxVolume
    projected?: ValuesSchemaBackstageExtraVolumesItems0Projected
    quobyte?: ValuesSchemaBackstageExtraVolumesItems0Quobyte
    rbd?: ValuesSchemaBackstageExtraVolumesItems0Rbd
    scaleIO?: ValuesSchemaBackstageExtraVolumesItems0ScaleIo
    secret?: ValuesSchemaBackstageExtraVolumesItems0Secret
    storageos?: ValuesSchemaBackstageExtraVolumesItems0Storageos
    vsphereVolume?: ValuesSchemaBackstageExtraVolumesItems0VsphereVolume

schema ValuesSchemaBackstageExtraVolumesItems0AwsElasticBlockStore:
    r"""
    Represents a Persistent Disk resource in AWS.

    An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.

    Attributes
    ----------
    fsType : str, optional
        fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    partition : int, optional
        partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
    readOnly : bool, optional
        readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    volumeID : str, required
        volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    """

    fsType?: str
    partition?: int
    readOnly?: bool
    volumeID: str

schema ValuesSchemaBackstageExtraVolumesItems0AzureDisk:
    r"""
    AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.

    Attributes
    ----------
    cachingMode : str, optional
        cachingMode is the Host Caching mode: None, Read Only, Read Write.
    diskName : str, required
        diskName is the Name of the data disk in the blob storage
    diskURI : str, required
        diskURI is the URI of data disk in the blob storage
    fsType : str, optional
        fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    kind : str, optional
        kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
    readOnly : bool, optional
        readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    """

    cachingMode?: str
    diskName: str
    diskURI: str
    fsType?: str
    kind?: str
    readOnly?: bool

schema ValuesSchemaBackstageExtraVolumesItems0AzureFile:
    r"""
    AzureFile represents an Azure File Service mount on the host and bind mount to the pod.

    Attributes
    ----------
    readOnly : bool, optional
        readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    secretName : str, required
        secretName is the  name of secret that contains Azure Storage Account Name and Key
    shareName : str, required
        shareName is the azure share Name
    """

    readOnly?: bool
    secretName: str
    shareName: str

schema ValuesSchemaBackstageExtraVolumesItems0Cephfs:
    r"""
    Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.

    Attributes
    ----------
    monitors : [str], required
        monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    path : str, optional
        path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
    readOnly : bool, optional
        readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    secretFile : str, optional
        secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    secretRef : ValuesSchemaBackstageExtraVolumesItems0CephfsSecretRef, optional
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    user : str, optional
        user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
    """

    monitors: [str]
    path?: str
    readOnly?: bool
    secretFile?: str
    secretRef?: ValuesSchemaBackstageExtraVolumesItems0CephfsSecretRef
    user?: str

schema ValuesSchemaBackstageExtraVolumesItems0CephfsSecretRef:
    r"""
    LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.

    Attributes
    ----------
    name : str, optional
        Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """

    name?: str

schema ValuesSchemaBackstageExtraVolumesItems0Cinder:
    r"""
    Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.

    Attributes
    ----------
    fsType : str, optional
        fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    readOnly : bool, optional
        readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    secretRef : ValuesSchemaBackstageExtraVolumesItems0CinderSecretRef, optional
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    volumeID : str, required
        volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    """

    fsType?: str
    readOnly?: bool
    secretRef?: ValuesSchemaBackstageExtraVolumesItems0CinderSecretRef
    volumeID: str

schema ValuesSchemaBackstageExtraVolumesItems0CinderSecretRef:
    r"""
    LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.

    Attributes
    ----------
    name : str, optional
        Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """

    name?: str

schema ValuesSchemaBackstageExtraVolumesItems0ConfigMap:
    r"""
    Adapts a ConfigMap into a volume.

    The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.

    Attributes
    ----------
    defaultMode : int, optional
        defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    items : [ValuesSchemaBackstageExtraVolumesItems0ConfigMapItemsItems0], optional
        items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    name : str, optional
        Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, optional
        optional specify whether the ConfigMap or its keys must be defined
    """

    defaultMode?: int
    items?: [ValuesSchemaBackstageExtraVolumesItems0ConfigMapItemsItems0]
    name?: str
    optional?: bool

schema ValuesSchemaBackstageExtraVolumesItems0ConfigMapItemsItems0:
    r"""
    Maps a string key to a path within a volume.

    Attributes
    ----------
    key : str, required
        key is the key to project.
    mode : int, optional
        mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    path : str, required
        path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
    """

    key: str
    mode?: int
    path: str

schema ValuesSchemaBackstageExtraVolumesItems0Csi:
    r"""
    Represents a source location of a volume to mount, managed by an external CSI driver

    Attributes
    ----------
    driver : str, required
        driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
    fsType : str, optional
        fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
    nodePublishSecretRef : ValuesSchemaBackstageExtraVolumesItems0CsiNodePublishSecretRef, optional
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    readOnly : bool, optional
        readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
    volumeAttributes : ValuesSchemaBackstageExtraVolumesItems0CsiVolumeAttributes, optional
        volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
    """

    driver: str
    fsType?: str
    nodePublishSecretRef?: ValuesSchemaBackstageExtraVolumesItems0CsiNodePublishSecretRef
    readOnly?: bool
    volumeAttributes?: ValuesSchemaBackstageExtraVolumesItems0CsiVolumeAttributes

schema ValuesSchemaBackstageExtraVolumesItems0CsiNodePublishSecretRef:
    r"""
    LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.

    Attributes
    ----------
    name : str, optional
        Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """

    name?: str

schema ValuesSchemaBackstageExtraVolumesItems0CsiVolumeAttributes:
    r"""
    volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
    """

    [...str]: str

schema ValuesSchemaBackstageExtraVolumesItems0DownwardApi:
    r"""
    DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.

    Attributes
    ----------
    defaultMode : int, optional
        Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    items : [ValuesSchemaBackstageExtraVolumesItems0DownwardApiItemsItems0], optional
        Items is a list of downward API volume file
    """

    defaultMode?: int
    items?: [ValuesSchemaBackstageExtraVolumesItems0DownwardApiItemsItems0]

schema ValuesSchemaBackstageExtraVolumesItems0DownwardApiItemsItems0:
    r"""
    DownwardAPIVolumeFile represents information to create the file containing the pod field

    Attributes
    ----------
    fieldRef : ValuesSchemaBackstageExtraVolumesItems0DownwardApiItemsItems0FieldRef, optional
        ObjectFieldSelector selects an APIVersioned field of an object.
    mode : int, optional
        Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    path : str, required
        Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
    resourceFieldRef : ValuesSchemaBackstageExtraVolumesItems0DownwardApiItemsItems0ResourceFieldRef, optional
        ResourceFieldSelector represents container resources (cpu, memory) and their output format
    """

    fieldRef?: ValuesSchemaBackstageExtraVolumesItems0DownwardApiItemsItems0FieldRef
    mode?: int
    path: str
    resourceFieldRef?: ValuesSchemaBackstageExtraVolumesItems0DownwardApiItemsItems0ResourceFieldRef

schema ValuesSchemaBackstageExtraVolumesItems0DownwardApiItemsItems0FieldRef:
    r"""
    ObjectFieldSelector selects an APIVersioned field of an object.

    Attributes
    ----------
    apiVersion : str, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, required
        Path of the field to select in the specified API version.
    """

    apiVersion?: str
    fieldPath: str

schema ValuesSchemaBackstageExtraVolumesItems0DownwardApiItemsItems0ResourceFieldRef:
    r"""
    ResourceFieldSelector represents container resources (cpu, memory) and their output format

    Attributes
    ----------
    containerName : str, optional
        Container name: required for volumes, optional for env vars
    divisor : str | float, optional
    resource : str, required
        Required: resource to select
    """

    containerName?: str
    divisor?: str | float
    resource: str

schema ValuesSchemaBackstageExtraVolumesItems0EmptyDir:
    r"""
    Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.

    Attributes
    ----------
    medium : str, optional
        medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
    sizeLimit : str | float, optional
    """

    medium?: str
    sizeLimit?: str | float

schema ValuesSchemaBackstageExtraVolumesItems0Ephemeral:
    r"""
    Represents an ephemeral volume that is handled by a normal storage driver.

    Attributes
    ----------
    volumeClaimTemplate : ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplate, optional
        PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
    """

    volumeClaimTemplate?: ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplate

schema ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplate:
    r"""
    PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.

    Attributes
    ----------
    metadata : ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateMetadata, optional
        ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
    spec : ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpec, required
        PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
    """

    metadata?: ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateMetadata
    spec: ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpec

schema ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateMetadata:
    r"""
    ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.

    Attributes
    ----------
    annotations : ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateMetadataAnnotations, optional
        Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
    creationTimestamp : str, optional
        Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    deletionGracePeriodSeconds : int, optional
        Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
    deletionTimestamp : str, optional
        Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    finalizers : [str], optional
        Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
    generateName : str, optional
        GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.

        If this field is specified and the generated name exists, the server will return a 409.

        Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
    generation : int, optional
        A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
    labels : ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateMetadataLabels, optional
        Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
    managedFields : [ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateMetadataManagedFieldsItems0], optional
        ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
    name : str, optional
        Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
    namespace : str, optional
        Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.

        Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
    ownerReferences : [ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateMetadataOwnerReferencesItems0], optional
        List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
    resourceVersion : str, optional
        An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.

        Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    selfLink : str, optional
        Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
    uid : str, optional
        UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.

        Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
    """

    annotations?: ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateMetadataAnnotations
    creationTimestamp?: str
    deletionGracePeriodSeconds?: int
    deletionTimestamp?: str
    finalizers?: [str]
    generateName?: str
    generation?: int
    labels?: ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateMetadataLabels
    managedFields?: [ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateMetadataManagedFieldsItems0]
    name?: str
    namespace?: str
    ownerReferences?: [ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateMetadataOwnerReferencesItems0]
    resourceVersion?: str
    selfLink?: str
    uid?: str

    check:
        regex.match(creationTimestamp, r"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[+-]\d{2}:\d{2})$") if creationTimestamp
        regex.match(deletionTimestamp, r"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[+-]\d{2}:\d{2})$") if deletionTimestamp

schema ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateMetadataAnnotations:
    r"""
    Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
    """

    [...str]: str

schema ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateMetadataLabels:
    r"""
    Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
    """

    [...str]: str

schema ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateMetadataManagedFieldsItems0:
    r"""
    ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.

    Attributes
    ----------
    apiVersion : str, optional
        APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
    fieldsType : str, optional
        FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
    fieldsV1 : ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateMetadataManagedFieldsItems0FieldsV1, optional
        FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.

        Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.

        The exact format is defined in sigs.k8s.io/structured-merge-diff
    manager : str, optional
        Manager is an identifier of the workflow managing these fields.
    operation : str, optional
        Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
    subresource : str, optional
        Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
    time : str, optional
        Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    """

    apiVersion?: str
    fieldsType?: str
    fieldsV1?: ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateMetadataManagedFieldsItems0FieldsV1
    manager?: str
    operation?: str
    subresource?: str
    time?: str

    check:
        regex.match(time, r"^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[+-]\d{2}:\d{2})$") if time

schema ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateMetadataManagedFieldsItems0FieldsV1:
    r"""
    FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.

    Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.

    The exact format is defined in sigs.k8s.io/structured-merge-diff
    """

    [...str]: any

schema ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateMetadataOwnerReferencesItems0:
    r"""
    OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.

    Attributes
    ----------
    apiVersion : str, required
        API version of the referent.
    blockOwnerDeletion : bool, optional
        If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
    controller : bool, optional
        If true, this reference points to the managing controller.
    kind : str, required
        Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    name : str, required
        Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
    uid : str, required
        UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
    """

    apiVersion: str
    blockOwnerDeletion?: bool
    controller?: bool
    kind: str
    name: str
    uid: str

schema ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpec:
    r"""
    PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes

    Attributes
    ----------
    accessModes : [str], optional
        accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    dataSource : ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecDataSource, optional
        TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
    dataSourceRef : ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecDataSourceRef, optional
        TypedObjectReference contains enough information to let you locate the typed referenced object
    resources : ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecResources, optional
        VolumeResourceRequirements describes the storage resource requirements for a volume.
    selector : ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecSelector, optional
        A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
    storageClassName : str, optional
        storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    volumeAttributesClassName : str, optional
        volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim. If specified, the CSI driver will create or update the volume with the attributes defined in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName, it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass will be applied to the claim but it's not allowed to reset this field to empty string once it is set. If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass will be set by the persistentvolume controller if it exists. If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/ (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
    volumeMode : str, optional
        volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
    volumeName : str, optional
        volumeName is the binding reference to the PersistentVolume backing this claim.
    """

    accessModes?: [str]
    dataSource?: ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecDataSource
    dataSourceRef?: ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecDataSourceRef
    resources?: ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecResources
    selector?: ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecSelector
    storageClassName?: str
    volumeAttributesClassName?: str
    volumeMode?: str
    volumeName?: str

schema ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecDataSource:
    r"""
    TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.

    Attributes
    ----------
    apiGroup : str, optional
        APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
    kind : str, required
        Kind is the type of resource being referenced
    name : str, required
        Name is the name of resource being referenced
    """

    apiGroup?: str
    kind: str
    name: str

schema ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecDataSourceRef:
    r"""
    TypedObjectReference contains enough information to let you locate the typed referenced object

    Attributes
    ----------
    apiGroup : str, optional
        APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
    kind : str, required
        Kind is the type of resource being referenced
    name : str, required
        Name is the name of resource being referenced
    namespace : str, optional
        Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
    """

    apiGroup?: str
    kind: str
    name: str
    namespace?: str

schema ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecResources:
    r"""
    VolumeResourceRequirements describes the storage resource requirements for a volume.

    Attributes
    ----------
    limits : ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecResourcesLimits, optional
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecResourcesRequests, optional
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """

    limits?: ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecResourcesLimits
    requests?: ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecResourcesRequests

schema ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecResourcesLimits:
    r"""
    Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """

    [...str]: str | float

schema ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecResourcesRequests:
    r"""
    Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """

    [...str]: str | float

schema ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecSelector:
    r"""
    A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.

    Attributes
    ----------
    matchExpressions : [ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsItems0], optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecSelectorMatchLabels, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    matchExpressions?: [ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsItems0]
    matchLabels?: ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecSelectorMatchLabels

schema ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, required
        key is the label key that the selector applies to.
    operator : str, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """

    key: str
    operator: str
    values?: [str]

schema ValuesSchemaBackstageExtraVolumesItems0EphemeralVolumeClaimTemplateSpecSelectorMatchLabels:
    r"""
    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    [...str]: str

schema ValuesSchemaBackstageExtraVolumesItems0Fc:
    r"""
    Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.

    Attributes
    ----------
    fsType : str, optional
        fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    lun : int, optional
        lun is Optional: FC target lun number
    readOnly : bool, optional
        readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    targetWWNs : [str], optional
        targetWWNs is Optional: FC target worldwide names (WWNs)
    wwids : [str], optional
        wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
    """

    fsType?: str
    lun?: int
    readOnly?: bool
    targetWWNs?: [str]
    wwids?: [str]

schema ValuesSchemaBackstageExtraVolumesItems0FlexVolume:
    r"""
    FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.

    Attributes
    ----------
    driver : str, required
        driver is the name of the driver to use for this volume.
    fsType : str, optional
        fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
    options : ValuesSchemaBackstageExtraVolumesItems0FlexVolumeOptions, optional
        options is Optional: this field holds extra command options if any.
    readOnly : bool, optional
        readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    secretRef : ValuesSchemaBackstageExtraVolumesItems0FlexVolumeSecretRef, optional
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    """

    driver: str
    fsType?: str
    options?: ValuesSchemaBackstageExtraVolumesItems0FlexVolumeOptions
    readOnly?: bool
    secretRef?: ValuesSchemaBackstageExtraVolumesItems0FlexVolumeSecretRef

schema ValuesSchemaBackstageExtraVolumesItems0FlexVolumeOptions:
    r"""
    options is Optional: this field holds extra command options if any.
    """

    [...str]: str

schema ValuesSchemaBackstageExtraVolumesItems0FlexVolumeSecretRef:
    r"""
    LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.

    Attributes
    ----------
    name : str, optional
        Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """

    name?: str

schema ValuesSchemaBackstageExtraVolumesItems0Flocker:
    r"""
    Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.

    Attributes
    ----------
    datasetName : str, optional
        datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
    datasetUUID : str, optional
        datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
    """

    datasetName?: str
    datasetUUID?: str

schema ValuesSchemaBackstageExtraVolumesItems0GcePersistentDisk:
    r"""
    Represents a Persistent Disk resource in Google Compute Engine.

    A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.

    Attributes
    ----------
    fsType : str, optional
        fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    partition : int, optional
        partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    pdName : str, required
        pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    readOnly : bool, optional
        readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
    """

    fsType?: str
    partition?: int
    pdName: str
    readOnly?: bool

schema ValuesSchemaBackstageExtraVolumesItems0GitRepo:
    r"""
    Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.

    DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.

    Attributes
    ----------
    directory : str, optional
        directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
    repository : str, required
        repository is the URL
    revision : str, optional
        revision is the commit hash for the specified revision.
    """

    directory?: str
    repository: str
    revision?: str

schema ValuesSchemaBackstageExtraVolumesItems0Glusterfs:
    r"""
    Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.

    Attributes
    ----------
    endpoints : str, required
        endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    path : str, required
        path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    readOnly : bool, optional
        readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
    """

    endpoints: str
    path: str
    readOnly?: bool

schema ValuesSchemaBackstageExtraVolumesItems0HostPath:
    r"""
    Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.

    Attributes
    ----------
    path : str, required
        path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    $type : str, optional
        type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
    """

    path: str
    $type?: str

schema ValuesSchemaBackstageExtraVolumesItems0Image:
    r"""
    ImageVolumeSource represents a image volume resource.

    Attributes
    ----------
    pullPolicy : str, optional
        Policy for pulling OCI objects. Possible values are: Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails. Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present. IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
    reference : str, optional
        Required: Image or artifact reference to be used. Behaves in the same way as pod.spec.containers[*].image. Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
    """

    pullPolicy?: str
    reference?: str

schema ValuesSchemaBackstageExtraVolumesItems0Iscsi:
    r"""
    Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.

    Attributes
    ----------
    chapAuthDiscovery : bool, optional
        chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
    chapAuthSession : bool, optional
        chapAuthSession defines whether support iSCSI Session CHAP authentication
    fsType : str, optional
        fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
    initiatorName : str, optional
        initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
    iqn : str, required
        iqn is the target iSCSI Qualified Name.
    iscsiInterface : str, optional
        iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
    lun : int, required
        lun represents iSCSI Target Lun number.
    portals : [str], optional
        portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    readOnly : bool, optional
        readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
    secretRef : ValuesSchemaBackstageExtraVolumesItems0IscsiSecretRef, optional
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    targetPortal : str, required
        targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    """

    chapAuthDiscovery?: bool
    chapAuthSession?: bool
    fsType?: str
    initiatorName?: str
    iqn: str
    iscsiInterface?: str
    lun: int
    portals?: [str]
    readOnly?: bool
    secretRef?: ValuesSchemaBackstageExtraVolumesItems0IscsiSecretRef
    targetPortal: str

schema ValuesSchemaBackstageExtraVolumesItems0IscsiSecretRef:
    r"""
    LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.

    Attributes
    ----------
    name : str, optional
        Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """

    name?: str

schema ValuesSchemaBackstageExtraVolumesItems0Nfs:
    r"""
    Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.

    Attributes
    ----------
    path : str, required
        path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    readOnly : bool, optional
        readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    server : str, required
        server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    """

    path: str
    readOnly?: bool
    server: str

schema ValuesSchemaBackstageExtraVolumesItems0PersistentVolumeClaim:
    r"""
    PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).

    Attributes
    ----------
    claimName : str, required
        claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
    readOnly : bool, optional
        readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
    """

    claimName: str
    readOnly?: bool

schema ValuesSchemaBackstageExtraVolumesItems0PhotonPersistentDisk:
    r"""
    Represents a Photon Controller persistent disk resource.

    Attributes
    ----------
    fsType : str, optional
        fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    pdID : str, required
        pdID is the ID that identifies Photon Controller persistent disk
    """

    fsType?: str
    pdID: str

schema ValuesSchemaBackstageExtraVolumesItems0PortworxVolume:
    r"""
    PortworxVolumeSource represents a Portworx volume resource.

    Attributes
    ----------
    fsType : str, optional
        fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
    readOnly : bool, optional
        readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    volumeID : str, required
        volumeID uniquely identifies a Portworx volume
    """

    fsType?: str
    readOnly?: bool
    volumeID: str

schema ValuesSchemaBackstageExtraVolumesItems0Projected:
    r"""
    Represents a projected volume source

    Attributes
    ----------
    defaultMode : int, optional
        defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    sources : [ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0], optional
        sources is the list of volume projections. Each entry in this list handles one source.
    """

    defaultMode?: int
    sources?: [ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0]

schema ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0:
    r"""
    Projection that may be projected along with other supported volume types. Exactly one of these fields must be set.

    Attributes
    ----------
    clusterTrustBundle : ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0ClusterTrustBundle, optional
        ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.
    configMap : ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0ConfigMap, optional
        Adapts a ConfigMap into a projected volume.

        The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
    downwardAPI : ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0DownwardApi, optional
        Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
    secret : ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0Secret, optional
        Adapts a secret into a projected volume.

        The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
    serviceAccountToken : ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0ServiceAccountToken, optional
        ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
    """

    clusterTrustBundle?: ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0ClusterTrustBundle
    configMap?: ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0ConfigMap
    downwardAPI?: ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0DownwardApi
    secret?: ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0Secret
    serviceAccountToken?: ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0ServiceAccountToken

schema ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0ClusterTrustBundle:
    r"""
    ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle objects and project their contents into the pod filesystem.

    Attributes
    ----------
    labelSelector : ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelector, optional
        A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
    name : str, optional
        Select a single ClusterTrustBundle by object name.  Mutually-exclusive with signerName and labelSelector.
    optional : bool, optional
        If true, don't block pod startup if the referenced ClusterTrustBundle(s) aren't available.  If using name, then the named ClusterTrustBundle is allowed not to exist.  If using signerName, then the combination of signerName and labelSelector is allowed to match zero ClusterTrustBundles.
    path : str, required
        Relative path from the volume root to write the bundle.
    signerName : str, optional
        Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with name.  The contents of all selected ClusterTrustBundles will be unified and deduplicated.
    """

    labelSelector?: ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelector
    name?: str
    optional?: bool
    path: str
    signerName?: str

schema ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelector:
    r"""
    A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.

    Attributes
    ----------
    matchExpressions : [ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelectorMatchExpressionsItems0], optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelectorMatchLabels, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    matchExpressions?: [ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelectorMatchExpressionsItems0]
    matchLabels?: ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelectorMatchLabels

schema ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, required
        key is the label key that the selector applies to.
    operator : str, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """

    key: str
    operator: str
    values?: [str]

schema ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0ClusterTrustBundleLabelSelectorMatchLabels:
    r"""
    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    [...str]: str

schema ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0ConfigMap:
    r"""
    Adapts a ConfigMap into a projected volume.

    The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.

    Attributes
    ----------
    items : [ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0ConfigMapItemsItems0], optional
        items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    name : str, optional
        Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, optional
        optional specify whether the ConfigMap or its keys must be defined
    """

    items?: [ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0ConfigMapItemsItems0]
    name?: str
    optional?: bool

schema ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0ConfigMapItemsItems0:
    r"""
    Maps a string key to a path within a volume.

    Attributes
    ----------
    key : str, required
        key is the key to project.
    mode : int, optional
        mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    path : str, required
        path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
    """

    key: str
    mode?: int
    path: str

schema ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0DownwardApi:
    r"""
    Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.

    Attributes
    ----------
    items : [ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0DownwardApiItemsItems0], optional
        Items is a list of DownwardAPIVolume file
    """

    items?: [ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0DownwardApiItemsItems0]

schema ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0DownwardApiItemsItems0:
    r"""
    DownwardAPIVolumeFile represents information to create the file containing the pod field

    Attributes
    ----------
    fieldRef : ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0DownwardApiItemsItems0FieldRef, optional
        ObjectFieldSelector selects an APIVersioned field of an object.
    mode : int, optional
        Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    path : str, required
        Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
    resourceFieldRef : ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0DownwardApiItemsItems0ResourceFieldRef, optional
        ResourceFieldSelector represents container resources (cpu, memory) and their output format
    """

    fieldRef?: ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0DownwardApiItemsItems0FieldRef
    mode?: int
    path: str
    resourceFieldRef?: ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0DownwardApiItemsItems0ResourceFieldRef

schema ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0DownwardApiItemsItems0FieldRef:
    r"""
    ObjectFieldSelector selects an APIVersioned field of an object.

    Attributes
    ----------
    apiVersion : str, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, required
        Path of the field to select in the specified API version.
    """

    apiVersion?: str
    fieldPath: str

schema ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0DownwardApiItemsItems0ResourceFieldRef:
    r"""
    ResourceFieldSelector represents container resources (cpu, memory) and their output format

    Attributes
    ----------
    containerName : str, optional
        Container name: required for volumes, optional for env vars
    divisor : str | float, optional
    resource : str, required
        Required: resource to select
    """

    containerName?: str
    divisor?: str | float
    resource: str

schema ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0Secret:
    r"""
    Adapts a secret into a projected volume.

    The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.

    Attributes
    ----------
    items : [ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0SecretItemsItems0], optional
        items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    name : str, optional
        Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, optional
        optional field specify whether the Secret or its key must be defined
    """

    items?: [ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0SecretItemsItems0]
    name?: str
    optional?: bool

schema ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0SecretItemsItems0:
    r"""
    Maps a string key to a path within a volume.

    Attributes
    ----------
    key : str, required
        key is the key to project.
    mode : int, optional
        mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    path : str, required
        path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
    """

    key: str
    mode?: int
    path: str

schema ValuesSchemaBackstageExtraVolumesItems0ProjectedSourcesItems0ServiceAccountToken:
    r"""
    ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).

    Attributes
    ----------
    audience : str, optional
        audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
    expirationSeconds : int, optional
        expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
    path : str, required
        path is the path relative to the mount point of the file to project the token into.
    """

    audience?: str
    expirationSeconds?: int
    path: str

schema ValuesSchemaBackstageExtraVolumesItems0Quobyte:
    r"""
    Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.

    Attributes
    ----------
    group : str, optional
        group to map volume access to Default is no group
    readOnly : bool, optional
        readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
    registry : str, required
        registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
    tenant : str, optional
        tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
    user : str, optional
        user to map volume access to Defaults to serivceaccount user
    volume : str, required
        volume is a string that references an already created Quobyte volume by name.
    """

    group?: str
    readOnly?: bool
    registry: str
    tenant?: str
    user?: str
    volume: str

schema ValuesSchemaBackstageExtraVolumesItems0Rbd:
    r"""
    Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.

    Attributes
    ----------
    fsType : str, optional
        fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
    image : str, required
        image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    keyring : str, optional
        keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    monitors : [str], required
        monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    pool : str, optional
        pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    readOnly : bool, optional
        readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    secretRef : ValuesSchemaBackstageExtraVolumesItems0RbdSecretRef, optional
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    user : str, optional
        user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
    """

    fsType?: str
    image: str
    keyring?: str
    monitors: [str]
    pool?: str
    readOnly?: bool
    secretRef?: ValuesSchemaBackstageExtraVolumesItems0RbdSecretRef
    user?: str

schema ValuesSchemaBackstageExtraVolumesItems0RbdSecretRef:
    r"""
    LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.

    Attributes
    ----------
    name : str, optional
        Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """

    name?: str

schema ValuesSchemaBackstageExtraVolumesItems0ScaleIo:
    r"""
    ScaleIOVolumeSource represents a persistent ScaleIO volume

    Attributes
    ----------
    fsType : str, optional
        fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
    gateway : str, required
        gateway is the host address of the ScaleIO API Gateway.
    protectionDomain : str, optional
        protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
    readOnly : bool, optional
        readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    secretRef : ValuesSchemaBackstageExtraVolumesItems0ScaleIoSecretRef, required
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    sslEnabled : bool, optional
        sslEnabled Flag enable/disable SSL communication with Gateway, default false
    storageMode : str, optional
        storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
    storagePool : str, optional
        storagePool is the ScaleIO Storage Pool associated with the protection domain.
    system : str, required
        system is the name of the storage system as configured in ScaleIO.
    volumeName : str, optional
        volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
    """

    fsType?: str
    gateway: str
    protectionDomain?: str
    readOnly?: bool
    secretRef: ValuesSchemaBackstageExtraVolumesItems0ScaleIoSecretRef
    sslEnabled?: bool
    storageMode?: str
    storagePool?: str
    system: str
    volumeName?: str

schema ValuesSchemaBackstageExtraVolumesItems0ScaleIoSecretRef:
    r"""
    LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.

    Attributes
    ----------
    name : str, optional
        Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """

    name?: str

schema ValuesSchemaBackstageExtraVolumesItems0Secret:
    r"""
    Adapts a Secret into a volume.

    The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.

    Attributes
    ----------
    defaultMode : int, optional
        defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    items : [ValuesSchemaBackstageExtraVolumesItems0SecretItemsItems0], optional
        items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
    optional : bool, optional
        optional field specify whether the Secret or its keys must be defined
    secretName : str, optional
        secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
    """

    defaultMode?: int
    items?: [ValuesSchemaBackstageExtraVolumesItems0SecretItemsItems0]
    optional?: bool
    secretName?: str

schema ValuesSchemaBackstageExtraVolumesItems0SecretItemsItems0:
    r"""
    Maps a string key to a path within a volume.

    Attributes
    ----------
    key : str, required
        key is the key to project.
    mode : int, optional
        mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    path : str, required
        path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
    """

    key: str
    mode?: int
    path: str

schema ValuesSchemaBackstageExtraVolumesItems0Storageos:
    r"""
    Represents a StorageOS persistent volume resource.

    Attributes
    ----------
    fsType : str, optional
        fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    readOnly : bool, optional
        readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
    secretRef : ValuesSchemaBackstageExtraVolumesItems0StorageosSecretRef, optional
        LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    volumeName : str, optional
        volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
    volumeNamespace : str, optional
        volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
    """

    fsType?: str
    readOnly?: bool
    secretRef?: ValuesSchemaBackstageExtraVolumesItems0StorageosSecretRef
    volumeName?: str
    volumeNamespace?: str

schema ValuesSchemaBackstageExtraVolumesItems0StorageosSecretRef:
    r"""
    LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.

    Attributes
    ----------
    name : str, optional
        Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    """

    name?: str

schema ValuesSchemaBackstageExtraVolumesItems0VsphereVolume:
    r"""
    Represents a vSphere volume resource.

    Attributes
    ----------
    fsType : str, optional
        fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
    storagePolicyID : str, optional
        storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
    storagePolicyName : str, optional
        storagePolicyName is the storage Policy Based Management (SPBM) profile name.
    volumePath : str, required
        volumePath is the path that identifies vSphere volume vmdk
    """

    fsType?: str
    storagePolicyID?: str
    storagePolicyName?: str
    volumePath: str

schema ValuesSchemaBackstageHostAliasesItems0:
    r"""
    HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.

    Attributes
    ----------
    hostnames : [str], optional
        Hostnames for the above IP address.
    ip : str, required
        IP address of the host file entry.
    """

    hostnames?: [str]
    ip: str

schema ValuesSchemaBackstageImage:
    r"""
    ValuesSchemaBackstageImage

    Attributes
    ----------
    digest : str, optional, default is ""
        digest takes precedence over image tag
    pullPolicy : "Always" | "IfNotPresent", optional, default is "Always"
        Ref: https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
    pullSecrets : [str], optional, default is []
        Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    registry : str, optional, default is "ghcr.io"
    repository : str, optional, default is "backstage/backstage"
    tag : str, optional, default is "latest"
        Immutable tags are recommended.
    """

    digest?: str = ""
    pullPolicy?: "Always" | "IfNotPresent" = "Always"
    pullSecrets?: [str] = []
    registry?: str = "ghcr.io"
    repository?: str = "backstage/backstage"
    tag?: str = "latest"

schema ValuesSchemaBackstageInitContainersItems0:
    r"""
    A single application container that you want to run within a pod.

    Attributes
    ----------
    args : [str], optional
        Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    command : [str], optional
        Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
    env : [ValuesSchemaBackstageInitContainersItems0EnvItems0], optional
        List of environment variables to set in the container. Cannot be updated.
    envFrom : [ValuesSchemaBackstageInitContainersItems0EnvFromItems0], optional
        List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
    image : str, optional
        Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
    imagePullPolicy : str, optional
        Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
    lifecycle : ValuesSchemaBackstageInitContainersItems0Lifecycle, optional
        Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
    livenessProbe : ValuesSchemaBackstageInitContainersItems0LivenessProbe, optional
        Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
    name : str, required
        Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
    ports : [ValuesSchemaBackstageInitContainersItems0PortsItems0], optional
        List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
    readinessProbe : ValuesSchemaBackstageInitContainersItems0ReadinessProbe, optional
        Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
    resizePolicy : [ValuesSchemaBackstageInitContainersItems0ResizePolicyItems0], optional
        Resources resize policy for the container.
    resources : ValuesSchemaBackstageInitContainersItems0Resources, optional
        ResourceRequirements describes the compute resource requirements.
    restartPolicy : str, optional
        RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is "Always". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as "Always" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy "Always" will be shut down. This lifecycle differs from normal init containers and is often referred to as a "sidecar" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.
    securityContext : ValuesSchemaBackstageInitContainersItems0SecurityContext, optional
        SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
    startupProbe : ValuesSchemaBackstageInitContainersItems0StartupProbe, optional
        Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
    stdin : bool, optional
        Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
    stdinOnce : bool, optional
        Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
    terminationMessagePath : str, optional
        Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
    terminationMessagePolicy : str, optional
        Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
    tty : bool, optional
        Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
    volumeDevices : [ValuesSchemaBackstageInitContainersItems0VolumeDevicesItems0], optional
        volumeDevices is the list of block devices to be used by the container.
    volumeMounts : [ValuesSchemaBackstageInitContainersItems0VolumeMountsItems0], optional
        Pod volumes to mount into the container's filesystem. Cannot be updated.
    workingDir : str, optional
        Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
    """

    args?: [str]
    command?: [str]
    env?: [ValuesSchemaBackstageInitContainersItems0EnvItems0]
    envFrom?: [ValuesSchemaBackstageInitContainersItems0EnvFromItems0]
    image?: str
    imagePullPolicy?: str
    lifecycle?: ValuesSchemaBackstageInitContainersItems0Lifecycle
    livenessProbe?: ValuesSchemaBackstageInitContainersItems0LivenessProbe
    name: str
    ports?: [ValuesSchemaBackstageInitContainersItems0PortsItems0]
    readinessProbe?: ValuesSchemaBackstageInitContainersItems0ReadinessProbe
    resizePolicy?: [ValuesSchemaBackstageInitContainersItems0ResizePolicyItems0]
    resources?: ValuesSchemaBackstageInitContainersItems0Resources
    restartPolicy?: str
    securityContext?: ValuesSchemaBackstageInitContainersItems0SecurityContext
    startupProbe?: ValuesSchemaBackstageInitContainersItems0StartupProbe
    stdin?: bool
    stdinOnce?: bool
    terminationMessagePath?: str
    terminationMessagePolicy?: str
    tty?: bool
    volumeDevices?: [ValuesSchemaBackstageInitContainersItems0VolumeDevicesItems0]
    volumeMounts?: [ValuesSchemaBackstageInitContainersItems0VolumeMountsItems0]
    workingDir?: str

schema ValuesSchemaBackstageInitContainersItems0EnvFromItems0:
    r"""
    EnvFromSource represents the source of a set of ConfigMaps or Secrets

    Attributes
    ----------
    configMapRef : ValuesSchemaBackstageInitContainersItems0EnvFromItems0ConfigMapRef, optional
        ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.

        The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
    prefix : str, optional
        Optional text to prepend to the name of each environment variable. Must be a C_IDENTIFIER.
    secretRef : ValuesSchemaBackstageInitContainersItems0EnvFromItems0SecretRef, optional
        SecretEnvSource selects a Secret to populate the environment variables with.

        The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
    """

    configMapRef?: ValuesSchemaBackstageInitContainersItems0EnvFromItems0ConfigMapRef
    prefix?: str
    secretRef?: ValuesSchemaBackstageInitContainersItems0EnvFromItems0SecretRef

schema ValuesSchemaBackstageInitContainersItems0EnvFromItems0ConfigMapRef:
    r"""
    ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.

    The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.

    Attributes
    ----------
    name : str, optional
        Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, optional
        Specify whether the ConfigMap must be defined
    """

    name?: str
    optional?: bool

schema ValuesSchemaBackstageInitContainersItems0EnvFromItems0SecretRef:
    r"""
    SecretEnvSource selects a Secret to populate the environment variables with.

    The contents of the target Secret's Data field will represent the key-value pairs as environment variables.

    Attributes
    ----------
    name : str, optional
        Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, optional
        Specify whether the Secret must be defined
    """

    name?: str
    optional?: bool

schema ValuesSchemaBackstageInitContainersItems0EnvItems0:
    r"""
    EnvVar represents an environment variable present in a Container.

    Attributes
    ----------
    name : str, required
        Name of the environment variable. Must be a C_IDENTIFIER.
    value : str, optional
        Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
    valueFrom : ValuesSchemaBackstageInitContainersItems0EnvItems0ValueFrom, optional
        EnvVarSource represents a source for the value of an EnvVar.
    """

    name: str
    value?: str
    valueFrom?: ValuesSchemaBackstageInitContainersItems0EnvItems0ValueFrom

schema ValuesSchemaBackstageInitContainersItems0EnvItems0ValueFrom:
    r"""
    EnvVarSource represents a source for the value of an EnvVar.

    Attributes
    ----------
    configMapKeyRef : ValuesSchemaBackstageInitContainersItems0EnvItems0ValueFromConfigMapKeyRef, optional
        Selects a key from a ConfigMap.
    fieldRef : ValuesSchemaBackstageInitContainersItems0EnvItems0ValueFromFieldRef, optional
        ObjectFieldSelector selects an APIVersioned field of an object.
    resourceFieldRef : ValuesSchemaBackstageInitContainersItems0EnvItems0ValueFromResourceFieldRef, optional
        ResourceFieldSelector represents container resources (cpu, memory) and their output format
    secretKeyRef : ValuesSchemaBackstageInitContainersItems0EnvItems0ValueFromSecretKeyRef, optional
        SecretKeySelector selects a key of a Secret.
    """

    configMapKeyRef?: ValuesSchemaBackstageInitContainersItems0EnvItems0ValueFromConfigMapKeyRef
    fieldRef?: ValuesSchemaBackstageInitContainersItems0EnvItems0ValueFromFieldRef
    resourceFieldRef?: ValuesSchemaBackstageInitContainersItems0EnvItems0ValueFromResourceFieldRef
    secretKeyRef?: ValuesSchemaBackstageInitContainersItems0EnvItems0ValueFromSecretKeyRef

schema ValuesSchemaBackstageInitContainersItems0EnvItems0ValueFromConfigMapKeyRef:
    r"""
    Selects a key from a ConfigMap.

    Attributes
    ----------
    key : str, required
        The key to select.
    name : str, optional
        Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, optional
        Specify whether the ConfigMap or its key must be defined
    """

    key: str
    name?: str
    optional?: bool

schema ValuesSchemaBackstageInitContainersItems0EnvItems0ValueFromFieldRef:
    r"""
    ObjectFieldSelector selects an APIVersioned field of an object.

    Attributes
    ----------
    apiVersion : str, optional
        Version of the schema the FieldPath is written in terms of, defaults to "v1".
    fieldPath : str, required
        Path of the field to select in the specified API version.
    """

    apiVersion?: str
    fieldPath: str

schema ValuesSchemaBackstageInitContainersItems0EnvItems0ValueFromResourceFieldRef:
    r"""
    ResourceFieldSelector represents container resources (cpu, memory) and their output format

    Attributes
    ----------
    containerName : str, optional
        Container name: required for volumes, optional for env vars
    divisor : str | float, optional
    resource : str, required
        Required: resource to select
    """

    containerName?: str
    divisor?: str | float
    resource: str

schema ValuesSchemaBackstageInitContainersItems0EnvItems0ValueFromSecretKeyRef:
    r"""
    SecretKeySelector selects a key of a Secret.

    Attributes
    ----------
    key : str, required
        The key of the secret to select from.  Must be a valid secret key.
    name : str, optional
        Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    optional : bool, optional
        Specify whether the Secret or its key must be defined
    """

    key: str
    name?: str
    optional?: bool

schema ValuesSchemaBackstageInitContainersItems0Lifecycle:
    r"""
    Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.

    Attributes
    ----------
    postStart : ValuesSchemaBackstageInitContainersItems0LifecyclePostStart, optional
        LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
    preStop : ValuesSchemaBackstageInitContainersItems0LifecyclePreStop, optional
        LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
    stopSignal : str, optional
        StopSignal defines which signal will be sent to a container when it is being stopped. If not specified, the default is defined by the container runtime in use. StopSignal can only be set for Pods with a non-empty .spec.os.name
    """

    postStart?: ValuesSchemaBackstageInitContainersItems0LifecyclePostStart
    preStop?: ValuesSchemaBackstageInitContainersItems0LifecyclePreStop
    stopSignal?: str

schema ValuesSchemaBackstageInitContainersItems0LifecyclePostStart:
    r"""
    LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.

    Attributes
    ----------
    exec : ValuesSchemaBackstageInitContainersItems0LifecyclePostStartExec, optional
        ExecAction describes a "run in container" action.
    httpGet : ValuesSchemaBackstageInitContainersItems0LifecyclePostStartHttpGet, optional
        HTTPGetAction describes an action based on HTTP Get requests.
    sleep : ValuesSchemaBackstageInitContainersItems0LifecyclePostStartSleep, optional
        SleepAction describes a "sleep" action.
    tcpSocket : ValuesSchemaBackstageInitContainersItems0LifecyclePostStartTcpSocket, optional
        TCPSocketAction describes an action based on opening a socket
    """

    exec?: ValuesSchemaBackstageInitContainersItems0LifecyclePostStartExec
    httpGet?: ValuesSchemaBackstageInitContainersItems0LifecyclePostStartHttpGet
    sleep?: ValuesSchemaBackstageInitContainersItems0LifecyclePostStartSleep
    tcpSocket?: ValuesSchemaBackstageInitContainersItems0LifecyclePostStartTcpSocket

schema ValuesSchemaBackstageInitContainersItems0LifecyclePostStartExec:
    r"""
    ExecAction describes a "run in container" action.

    Attributes
    ----------
    command : [str], optional
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """

    command?: [str]

schema ValuesSchemaBackstageInitContainersItems0LifecyclePostStartHttpGet:
    r"""
    HTTPGetAction describes an action based on HTTP Get requests.

    Attributes
    ----------
    host : str, optional
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    httpHeaders : [ValuesSchemaBackstageInitContainersItems0LifecyclePostStartHttpGetHttpHeadersItems0], optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, optional
        Path to access on the HTTP server.
    port : str | int, required
    scheme : str, optional
        Scheme to use for connecting to the host. Defaults to HTTP.
    """

    host?: str
    httpHeaders?: [ValuesSchemaBackstageInitContainersItems0LifecyclePostStartHttpGetHttpHeadersItems0]
    path?: str
    port: str | int
    scheme?: str

schema ValuesSchemaBackstageInitContainersItems0LifecyclePostStartHttpGetHttpHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, required
        The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, required
        The header field value
    """

    name: str
    value: str

schema ValuesSchemaBackstageInitContainersItems0LifecyclePostStartSleep:
    r"""
    SleepAction describes a "sleep" action.

    Attributes
    ----------
    seconds : int, required
        Seconds is the number of seconds to sleep.
    """

    seconds: int

schema ValuesSchemaBackstageInitContainersItems0LifecyclePostStartTcpSocket:
    r"""
    TCPSocketAction describes an action based on opening a socket

    Attributes
    ----------
    host : str, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : str | int, required
    """

    host?: str
    port: str | int

schema ValuesSchemaBackstageInitContainersItems0LifecyclePreStop:
    r"""
    LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.

    Attributes
    ----------
    exec : ValuesSchemaBackstageInitContainersItems0LifecyclePreStopExec, optional
        ExecAction describes a "run in container" action.
    httpGet : ValuesSchemaBackstageInitContainersItems0LifecyclePreStopHttpGet, optional
        HTTPGetAction describes an action based on HTTP Get requests.
    sleep : ValuesSchemaBackstageInitContainersItems0LifecyclePreStopSleep, optional
        SleepAction describes a "sleep" action.
    tcpSocket : ValuesSchemaBackstageInitContainersItems0LifecyclePreStopTcpSocket, optional
        TCPSocketAction describes an action based on opening a socket
    """

    exec?: ValuesSchemaBackstageInitContainersItems0LifecyclePreStopExec
    httpGet?: ValuesSchemaBackstageInitContainersItems0LifecyclePreStopHttpGet
    sleep?: ValuesSchemaBackstageInitContainersItems0LifecyclePreStopSleep
    tcpSocket?: ValuesSchemaBackstageInitContainersItems0LifecyclePreStopTcpSocket

schema ValuesSchemaBackstageInitContainersItems0LifecyclePreStopExec:
    r"""
    ExecAction describes a "run in container" action.

    Attributes
    ----------
    command : [str], optional
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """

    command?: [str]

schema ValuesSchemaBackstageInitContainersItems0LifecyclePreStopHttpGet:
    r"""
    HTTPGetAction describes an action based on HTTP Get requests.

    Attributes
    ----------
    host : str, optional
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    httpHeaders : [ValuesSchemaBackstageInitContainersItems0LifecyclePreStopHttpGetHttpHeadersItems0], optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, optional
        Path to access on the HTTP server.
    port : str | int, required
    scheme : str, optional
        Scheme to use for connecting to the host. Defaults to HTTP.
    """

    host?: str
    httpHeaders?: [ValuesSchemaBackstageInitContainersItems0LifecyclePreStopHttpGetHttpHeadersItems0]
    path?: str
    port: str | int
    scheme?: str

schema ValuesSchemaBackstageInitContainersItems0LifecyclePreStopHttpGetHttpHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, required
        The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, required
        The header field value
    """

    name: str
    value: str

schema ValuesSchemaBackstageInitContainersItems0LifecyclePreStopSleep:
    r"""
    SleepAction describes a "sleep" action.

    Attributes
    ----------
    seconds : int, required
        Seconds is the number of seconds to sleep.
    """

    seconds: int

schema ValuesSchemaBackstageInitContainersItems0LifecyclePreStopTcpSocket:
    r"""
    TCPSocketAction describes an action based on opening a socket

    Attributes
    ----------
    host : str, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : str | int, required
    """

    host?: str
    port: str | int

schema ValuesSchemaBackstageInitContainersItems0LivenessProbe:
    r"""
    Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.

    Attributes
    ----------
    exec : ValuesSchemaBackstageInitContainersItems0LivenessProbeExec, optional
        ExecAction describes a "run in container" action.
    failureThreshold : int, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    grpc : ValuesSchemaBackstageInitContainersItems0LivenessProbeGrpc, optional
        GRPCAction specifies an action involving a GRPC service.
    httpGet : ValuesSchemaBackstageInitContainersItems0LivenessProbeHttpGet, optional
        HTTPGetAction describes an action based on HTTP Get requests.
    initialDelaySeconds : int, optional
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, optional
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    successThreshold : int, optional
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : ValuesSchemaBackstageInitContainersItems0LivenessProbeTcpSocket, optional
        TCPSocketAction describes an action based on opening a socket
    terminationGracePeriodSeconds : int, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, optional
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """

    exec?: ValuesSchemaBackstageInitContainersItems0LivenessProbeExec
    failureThreshold?: int
    grpc?: ValuesSchemaBackstageInitContainersItems0LivenessProbeGrpc
    httpGet?: ValuesSchemaBackstageInitContainersItems0LivenessProbeHttpGet
    initialDelaySeconds?: int
    periodSeconds?: int
    successThreshold?: int
    tcpSocket?: ValuesSchemaBackstageInitContainersItems0LivenessProbeTcpSocket
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema ValuesSchemaBackstageInitContainersItems0LivenessProbeExec:
    r"""
    ExecAction describes a "run in container" action.

    Attributes
    ----------
    command : [str], optional
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """

    command?: [str]

schema ValuesSchemaBackstageInitContainersItems0LivenessProbeGrpc:
    r"""
    GRPCAction specifies an action involving a GRPC service.

    Attributes
    ----------
    port : int, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """

    port: int
    service?: str

schema ValuesSchemaBackstageInitContainersItems0LivenessProbeHttpGet:
    r"""
    HTTPGetAction describes an action based on HTTP Get requests.

    Attributes
    ----------
    host : str, optional
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    httpHeaders : [ValuesSchemaBackstageInitContainersItems0LivenessProbeHttpGetHttpHeadersItems0], optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, optional
        Path to access on the HTTP server.
    port : str | int, required
    scheme : str, optional
        Scheme to use for connecting to the host. Defaults to HTTP.
    """

    host?: str
    httpHeaders?: [ValuesSchemaBackstageInitContainersItems0LivenessProbeHttpGetHttpHeadersItems0]
    path?: str
    port: str | int
    scheme?: str

schema ValuesSchemaBackstageInitContainersItems0LivenessProbeHttpGetHttpHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, required
        The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, required
        The header field value
    """

    name: str
    value: str

schema ValuesSchemaBackstageInitContainersItems0LivenessProbeTcpSocket:
    r"""
    TCPSocketAction describes an action based on opening a socket

    Attributes
    ----------
    host : str, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : str | int, required
    """

    host?: str
    port: str | int

schema ValuesSchemaBackstageInitContainersItems0PortsItems0:
    r"""
    ContainerPort represents a network port in a single container.

    Attributes
    ----------
    containerPort : int, required
        Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
    hostIP : str, optional
        What host IP to bind the external port to.
    hostPort : int, optional
        Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
    name : str, optional
        If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
    $protocol : str, optional
        Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
    """

    containerPort: int
    hostIP?: str
    hostPort?: int
    name?: str
    $protocol?: str

schema ValuesSchemaBackstageInitContainersItems0ReadinessProbe:
    r"""
    Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.

    Attributes
    ----------
    exec : ValuesSchemaBackstageInitContainersItems0ReadinessProbeExec, optional
        ExecAction describes a "run in container" action.
    failureThreshold : int, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    grpc : ValuesSchemaBackstageInitContainersItems0ReadinessProbeGrpc, optional
        GRPCAction specifies an action involving a GRPC service.
    httpGet : ValuesSchemaBackstageInitContainersItems0ReadinessProbeHttpGet, optional
        HTTPGetAction describes an action based on HTTP Get requests.
    initialDelaySeconds : int, optional
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, optional
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    successThreshold : int, optional
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : ValuesSchemaBackstageInitContainersItems0ReadinessProbeTcpSocket, optional
        TCPSocketAction describes an action based on opening a socket
    terminationGracePeriodSeconds : int, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, optional
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """

    exec?: ValuesSchemaBackstageInitContainersItems0ReadinessProbeExec
    failureThreshold?: int
    grpc?: ValuesSchemaBackstageInitContainersItems0ReadinessProbeGrpc
    httpGet?: ValuesSchemaBackstageInitContainersItems0ReadinessProbeHttpGet
    initialDelaySeconds?: int
    periodSeconds?: int
    successThreshold?: int
    tcpSocket?: ValuesSchemaBackstageInitContainersItems0ReadinessProbeTcpSocket
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema ValuesSchemaBackstageInitContainersItems0ReadinessProbeExec:
    r"""
    ExecAction describes a "run in container" action.

    Attributes
    ----------
    command : [str], optional
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """

    command?: [str]

schema ValuesSchemaBackstageInitContainersItems0ReadinessProbeGrpc:
    r"""
    GRPCAction specifies an action involving a GRPC service.

    Attributes
    ----------
    port : int, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """

    port: int
    service?: str

schema ValuesSchemaBackstageInitContainersItems0ReadinessProbeHttpGet:
    r"""
    HTTPGetAction describes an action based on HTTP Get requests.

    Attributes
    ----------
    host : str, optional
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    httpHeaders : [ValuesSchemaBackstageInitContainersItems0ReadinessProbeHttpGetHttpHeadersItems0], optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, optional
        Path to access on the HTTP server.
    port : str | int, required
    scheme : str, optional
        Scheme to use for connecting to the host. Defaults to HTTP.
    """

    host?: str
    httpHeaders?: [ValuesSchemaBackstageInitContainersItems0ReadinessProbeHttpGetHttpHeadersItems0]
    path?: str
    port: str | int
    scheme?: str

schema ValuesSchemaBackstageInitContainersItems0ReadinessProbeHttpGetHttpHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, required
        The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, required
        The header field value
    """

    name: str
    value: str

schema ValuesSchemaBackstageInitContainersItems0ReadinessProbeTcpSocket:
    r"""
    TCPSocketAction describes an action based on opening a socket

    Attributes
    ----------
    host : str, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : str | int, required
    """

    host?: str
    port: str | int

schema ValuesSchemaBackstageInitContainersItems0ResizePolicyItems0:
    r"""
    ContainerResizePolicy represents resource resize policy for the container.

    Attributes
    ----------
    resourceName : str, required
        Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
    restartPolicy : str, required
        Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
    """

    resourceName: str
    restartPolicy: str

schema ValuesSchemaBackstageInitContainersItems0Resources:
    r"""
    ResourceRequirements describes the compute resource requirements.

    Attributes
    ----------
    claims : [ValuesSchemaBackstageInitContainersItems0ResourcesClaimsItems0], optional
        Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.

        This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.

        This field is immutable. It can only be set for containers.
    limits : ValuesSchemaBackstageInitContainersItems0ResourcesLimits, optional
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : ValuesSchemaBackstageInitContainersItems0ResourcesRequests, optional
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """

    claims?: [ValuesSchemaBackstageInitContainersItems0ResourcesClaimsItems0]
    limits?: ValuesSchemaBackstageInitContainersItems0ResourcesLimits
    requests?: ValuesSchemaBackstageInitContainersItems0ResourcesRequests

schema ValuesSchemaBackstageInitContainersItems0ResourcesClaimsItems0:
    r"""
    ResourceClaim references one entry in PodSpec.ResourceClaims.

    Attributes
    ----------
    name : str, required
        Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    request : str, optional
        Request is the name chosen for a request in the referenced claim. If empty, everything from the claim is made available, otherwise only the result of this request.
    """

    name: str
    request?: str

schema ValuesSchemaBackstageInitContainersItems0ResourcesLimits:
    r"""
    Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """

    [...str]: str | float

schema ValuesSchemaBackstageInitContainersItems0ResourcesRequests:
    r"""
    Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """

    [...str]: str | float

schema ValuesSchemaBackstageInitContainersItems0SecurityContext:
    r"""
    SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.

    Attributes
    ----------
    allowPrivilegeEscalation : bool, optional
        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
    appArmorProfile : ValuesSchemaBackstageInitContainersItems0SecurityContextAppArmorProfile, optional
        AppArmorProfile defines a pod or container's AppArmor settings.
    capabilities : ValuesSchemaBackstageInitContainersItems0SecurityContextCapabilities, optional
        Adds and removes POSIX capabilities from running containers.
    privileged : bool, optional
        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
    procMount : str, optional
        procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
    readOnlyRootFilesystem : bool, optional
        Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
    runAsGroup : int, optional
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
    runAsNonRoot : bool, optional
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    runAsUser : int, optional
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
    seLinuxOptions : ValuesSchemaBackstageInitContainersItems0SecurityContextSeLinuxOptions, optional
        SELinuxOptions are the labels to be applied to the container
    seccompProfile : ValuesSchemaBackstageInitContainersItems0SecurityContextSeccompProfile, optional
        SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
    windowsOptions : ValuesSchemaBackstageInitContainersItems0SecurityContextWindowsOptions, optional
        WindowsSecurityContextOptions contain Windows-specific options and credentials.
    """

    allowPrivilegeEscalation?: bool
    appArmorProfile?: ValuesSchemaBackstageInitContainersItems0SecurityContextAppArmorProfile
    capabilities?: ValuesSchemaBackstageInitContainersItems0SecurityContextCapabilities
    privileged?: bool
    procMount?: str
    readOnlyRootFilesystem?: bool
    runAsGroup?: int
    runAsNonRoot?: bool
    runAsUser?: int
    seLinuxOptions?: ValuesSchemaBackstageInitContainersItems0SecurityContextSeLinuxOptions
    seccompProfile?: ValuesSchemaBackstageInitContainersItems0SecurityContextSeccompProfile
    windowsOptions?: ValuesSchemaBackstageInitContainersItems0SecurityContextWindowsOptions

schema ValuesSchemaBackstageInitContainersItems0SecurityContextAppArmorProfile:
    r"""
    AppArmorProfile defines a pod or container's AppArmor settings.

    Attributes
    ----------
    localhostProfile : str, optional
        localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is "Localhost".
    $type : str, required
        type indicates which kind of AppArmor profile will be applied. Valid options are:
          Localhost - a profile pre-loaded on the node.
          RuntimeDefault - the container runtime's default profile.
          Unconfined - no AppArmor enforcement.
    """

    localhostProfile?: str
    $type: str

schema ValuesSchemaBackstageInitContainersItems0SecurityContextCapabilities:
    r"""
    Adds and removes POSIX capabilities from running containers.

    Attributes
    ----------
    add : [str], optional
        Added capabilities
    drop : [str], optional
        Removed capabilities
    """

    add?: [str]
    drop?: [str]

schema ValuesSchemaBackstageInitContainersItems0SecurityContextSeLinuxOptions:
    r"""
    SELinuxOptions are the labels to be applied to the container

    Attributes
    ----------
    level : str, optional
        Level is SELinux level label that applies to the container.
    role : str, optional
        Role is a SELinux role label that applies to the container.
    $type : str, optional
        Type is a SELinux type label that applies to the container.
    user : str, optional
        User is a SELinux user label that applies to the container.
    """

    level?: str
    role?: str
    $type?: str
    user?: str

schema ValuesSchemaBackstageInitContainersItems0SecurityContextSeccompProfile:
    r"""
    SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.

    Attributes
    ----------
    localhostProfile : str, optional
        localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
    $type : str, required
        type indicates which kind of seccomp profile will be applied. Valid options are:

        Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
    """

    localhostProfile?: str
    $type: str

schema ValuesSchemaBackstageInitContainersItems0SecurityContextWindowsOptions:
    r"""
    WindowsSecurityContextOptions contain Windows-specific options and credentials.

    Attributes
    ----------
    gmsaCredentialSpec : str, optional
        GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
    gmsaCredentialSpecName : str, optional
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
    hostProcess : bool, optional
        HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
    runAsUserName : str, optional
        The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    """

    gmsaCredentialSpec?: str
    gmsaCredentialSpecName?: str
    hostProcess?: bool
    runAsUserName?: str

schema ValuesSchemaBackstageInitContainersItems0StartupProbe:
    r"""
    Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.

    Attributes
    ----------
    exec : ValuesSchemaBackstageInitContainersItems0StartupProbeExec, optional
        ExecAction describes a "run in container" action.
    failureThreshold : int, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    grpc : ValuesSchemaBackstageInitContainersItems0StartupProbeGrpc, optional
        GRPCAction specifies an action involving a GRPC service.
    httpGet : ValuesSchemaBackstageInitContainersItems0StartupProbeHttpGet, optional
        HTTPGetAction describes an action based on HTTP Get requests.
    initialDelaySeconds : int, optional
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, optional
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    successThreshold : int, optional
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : ValuesSchemaBackstageInitContainersItems0StartupProbeTcpSocket, optional
        TCPSocketAction describes an action based on opening a socket
    terminationGracePeriodSeconds : int, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, optional
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """

    exec?: ValuesSchemaBackstageInitContainersItems0StartupProbeExec
    failureThreshold?: int
    grpc?: ValuesSchemaBackstageInitContainersItems0StartupProbeGrpc
    httpGet?: ValuesSchemaBackstageInitContainersItems0StartupProbeHttpGet
    initialDelaySeconds?: int
    periodSeconds?: int
    successThreshold?: int
    tcpSocket?: ValuesSchemaBackstageInitContainersItems0StartupProbeTcpSocket
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema ValuesSchemaBackstageInitContainersItems0StartupProbeExec:
    r"""
    ExecAction describes a "run in container" action.

    Attributes
    ----------
    command : [str], optional
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """

    command?: [str]

schema ValuesSchemaBackstageInitContainersItems0StartupProbeGrpc:
    r"""
    GRPCAction specifies an action involving a GRPC service.

    Attributes
    ----------
    port : int, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """

    port: int
    service?: str

schema ValuesSchemaBackstageInitContainersItems0StartupProbeHttpGet:
    r"""
    HTTPGetAction describes an action based on HTTP Get requests.

    Attributes
    ----------
    host : str, optional
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    httpHeaders : [ValuesSchemaBackstageInitContainersItems0StartupProbeHttpGetHttpHeadersItems0], optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, optional
        Path to access on the HTTP server.
    port : str | int, required
    scheme : str, optional
        Scheme to use for connecting to the host. Defaults to HTTP.
    """

    host?: str
    httpHeaders?: [ValuesSchemaBackstageInitContainersItems0StartupProbeHttpGetHttpHeadersItems0]
    path?: str
    port: str | int
    scheme?: str

schema ValuesSchemaBackstageInitContainersItems0StartupProbeHttpGetHttpHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, required
        The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, required
        The header field value
    """

    name: str
    value: str

schema ValuesSchemaBackstageInitContainersItems0StartupProbeTcpSocket:
    r"""
    TCPSocketAction describes an action based on opening a socket

    Attributes
    ----------
    host : str, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : str | int, required
    """

    host?: str
    port: str | int

schema ValuesSchemaBackstageInitContainersItems0VolumeDevicesItems0:
    r"""
    volumeDevice describes a mapping of a raw block device within a container.

    Attributes
    ----------
    devicePath : str, required
        devicePath is the path inside of the container that the device will be mapped to.
    name : str, required
        name must match the name of a persistentVolumeClaim in the pod
    """

    devicePath: str
    name: str

schema ValuesSchemaBackstageInitContainersItems0VolumeMountsItems0:
    r"""
    VolumeMount describes a mounting of a Volume within a container.

    Attributes
    ----------
    mountPath : str, required
        Path within the container at which the volume should be mounted.  Must not contain ':'.
    mountPropagation : str, optional
        mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified (which defaults to None).
    name : str, required
        This must match the Name of a Volume.
    readOnly : bool, optional
        Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
    recursiveReadOnly : str, optional
        RecursiveReadOnly specifies whether read-only mounts should be handled recursively.

        If ReadOnly is false, this field has no meaning and must be unspecified.

        If ReadOnly is true, and this field is set to Disabled, the mount is not made recursively read-only.  If this field is set to IfPossible, the mount is made recursively read-only, if it is supported by the container runtime.  If this field is set to Enabled, the mount is made recursively read-only if it is supported by the container runtime, otherwise the pod will not be started and an error will be generated to indicate the reason.

        If this field is set to IfPossible or Enabled, MountPropagation must be set to None (or be unspecified, which defaults to None).

        If this field is not specified, it is treated as an equivalent of Disabled.
    subPath : str, optional
        Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
    subPathExpr : str, optional
        Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
    """

    mountPath: str
    mountPropagation?: str
    name: str
    readOnly?: bool
    recursiveReadOnly?: str
    subPath?: str
    subPathExpr?: str

schema ValuesSchemaBackstageLivenessProbe:
    r"""
    Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.

    Attributes
    ----------
    exec : ValuesSchemaBackstageLivenessProbeExec, optional
        ExecAction describes a "run in container" action.
    failureThreshold : int, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    grpc : ValuesSchemaBackstageLivenessProbeGrpc, optional
        GRPCAction specifies an action involving a GRPC service.
    httpGet : ValuesSchemaBackstageLivenessProbeHttpGet, optional
        HTTPGetAction describes an action based on HTTP Get requests.
    initialDelaySeconds : int, optional
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, optional
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    successThreshold : int, optional
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : ValuesSchemaBackstageLivenessProbeTcpSocket, optional
        TCPSocketAction describes an action based on opening a socket
    terminationGracePeriodSeconds : int, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, optional
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """

    exec?: ValuesSchemaBackstageLivenessProbeExec
    failureThreshold?: int
    grpc?: ValuesSchemaBackstageLivenessProbeGrpc
    httpGet?: ValuesSchemaBackstageLivenessProbeHttpGet
    initialDelaySeconds?: int
    periodSeconds?: int
    successThreshold?: int
    tcpSocket?: ValuesSchemaBackstageLivenessProbeTcpSocket
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema ValuesSchemaBackstageLivenessProbeExec:
    r"""
    ExecAction describes a "run in container" action.

    Attributes
    ----------
    command : [str], optional
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """

    command?: [str]

schema ValuesSchemaBackstageLivenessProbeGrpc:
    r"""
    GRPCAction specifies an action involving a GRPC service.

    Attributes
    ----------
    port : int, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """

    port: int
    service?: str

schema ValuesSchemaBackstageLivenessProbeHttpGet:
    r"""
    HTTPGetAction describes an action based on HTTP Get requests.

    Attributes
    ----------
    host : str, optional
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    httpHeaders : [ValuesSchemaBackstageLivenessProbeHttpGetHttpHeadersItems0], optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, optional
        Path to access on the HTTP server.
    port : str | int, required
    scheme : str, optional
        Scheme to use for connecting to the host. Defaults to HTTP.
    """

    host?: str
    httpHeaders?: [ValuesSchemaBackstageLivenessProbeHttpGetHttpHeadersItems0]
    path?: str
    port: str | int
    scheme?: str

schema ValuesSchemaBackstageLivenessProbeHttpGetHttpHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, required
        The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, required
        The header field value
    """

    name: str
    value: str

schema ValuesSchemaBackstageLivenessProbeTcpSocket:
    r"""
    TCPSocketAction describes an action based on opening a socket

    Attributes
    ----------
    host : str, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : str | int, required
    """

    host?: str
    port: str | int

schema ValuesSchemaBackstageNodeSelector:
    r"""
    Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
    """

    [...str]: str

schema ValuesSchemaBackstagePdb:
    r"""
    ValuesSchemaBackstagePdb

    Attributes
    ----------
    create : bool, optional, default is False
        Create a PDB
    maxUnavailable : str | int, optional, default is ""
    minAvailable : str | int, optional, default is ""
    """

    create?: bool = False
    maxUnavailable?: str | int = ""
    minAvailable?: str | int = ""

schema ValuesSchemaBackstagePodAnnotations:
    r"""
    ValuesSchemaBackstagePodAnnotations
    """

    [...str]: str

schema ValuesSchemaBackstagePodLabels:
    r"""
    ValuesSchemaBackstagePodLabels
    """

    [...str]: str

schema ValuesSchemaBackstagePodSecurityContext:
    r"""
    SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.

    Attributes
    ----------
    allowPrivilegeEscalation : bool, optional
        AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
    appArmorProfile : ValuesSchemaBackstagePodSecurityContextAppArmorProfile, optional
        AppArmorProfile defines a pod or container's AppArmor settings.
    capabilities : ValuesSchemaBackstagePodSecurityContextCapabilities, optional
        Adds and removes POSIX capabilities from running containers.
    privileged : bool, optional
        Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
    procMount : str, optional
        procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
    readOnlyRootFilesystem : bool, optional
        Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
    runAsGroup : int, optional
        The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
    runAsNonRoot : bool, optional
        Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    runAsUser : int, optional
        The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
    seLinuxOptions : ValuesSchemaBackstagePodSecurityContextSeLinuxOptions, optional
        SELinuxOptions are the labels to be applied to the container
    seccompProfile : ValuesSchemaBackstagePodSecurityContextSeccompProfile, optional
        SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
    windowsOptions : ValuesSchemaBackstagePodSecurityContextWindowsOptions, optional
        WindowsSecurityContextOptions contain Windows-specific options and credentials.
    """

    allowPrivilegeEscalation?: bool
    appArmorProfile?: ValuesSchemaBackstagePodSecurityContextAppArmorProfile
    capabilities?: ValuesSchemaBackstagePodSecurityContextCapabilities
    privileged?: bool
    procMount?: str
    readOnlyRootFilesystem?: bool
    runAsGroup?: int
    runAsNonRoot?: bool
    runAsUser?: int
    seLinuxOptions?: ValuesSchemaBackstagePodSecurityContextSeLinuxOptions
    seccompProfile?: ValuesSchemaBackstagePodSecurityContextSeccompProfile
    windowsOptions?: ValuesSchemaBackstagePodSecurityContextWindowsOptions

schema ValuesSchemaBackstagePodSecurityContextAppArmorProfile:
    r"""
    AppArmorProfile defines a pod or container's AppArmor settings.

    Attributes
    ----------
    localhostProfile : str, optional
        localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is "Localhost".
    $type : str, required
        type indicates which kind of AppArmor profile will be applied. Valid options are:
          Localhost - a profile pre-loaded on the node.
          RuntimeDefault - the container runtime's default profile.
          Unconfined - no AppArmor enforcement.
    """

    localhostProfile?: str
    $type: str

schema ValuesSchemaBackstagePodSecurityContextCapabilities:
    r"""
    Adds and removes POSIX capabilities from running containers.

    Attributes
    ----------
    add : [str], optional
        Added capabilities
    drop : [str], optional
        Removed capabilities
    """

    add?: [str]
    drop?: [str]

schema ValuesSchemaBackstagePodSecurityContextSeLinuxOptions:
    r"""
    SELinuxOptions are the labels to be applied to the container

    Attributes
    ----------
    level : str, optional
        Level is SELinux level label that applies to the container.
    role : str, optional
        Role is a SELinux role label that applies to the container.
    $type : str, optional
        Type is a SELinux type label that applies to the container.
    user : str, optional
        User is a SELinux user label that applies to the container.
    """

    level?: str
    role?: str
    $type?: str
    user?: str

schema ValuesSchemaBackstagePodSecurityContextSeccompProfile:
    r"""
    SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.

    Attributes
    ----------
    localhostProfile : str, optional
        localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
    $type : str, required
        type indicates which kind of seccomp profile will be applied. Valid options are:

        Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
    """

    localhostProfile?: str
    $type: str

schema ValuesSchemaBackstagePodSecurityContextWindowsOptions:
    r"""
    WindowsSecurityContextOptions contain Windows-specific options and credentials.

    Attributes
    ----------
    gmsaCredentialSpec : str, optional
        GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
    gmsaCredentialSpecName : str, optional
        GMSACredentialSpecName is the name of the GMSA credential spec to use.
    hostProcess : bool, optional
        HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
    runAsUserName : str, optional
        The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
    """

    gmsaCredentialSpec?: str
    gmsaCredentialSpecName?: str
    hostProcess?: bool
    runAsUserName?: str

schema ValuesSchemaBackstageReadinessProbe:
    r"""
    Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.

    Attributes
    ----------
    exec : ValuesSchemaBackstageReadinessProbeExec, optional
        ExecAction describes a "run in container" action.
    failureThreshold : int, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    grpc : ValuesSchemaBackstageReadinessProbeGrpc, optional
        GRPCAction specifies an action involving a GRPC service.
    httpGet : ValuesSchemaBackstageReadinessProbeHttpGet, optional
        HTTPGetAction describes an action based on HTTP Get requests.
    initialDelaySeconds : int, optional
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, optional
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    successThreshold : int, optional
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : ValuesSchemaBackstageReadinessProbeTcpSocket, optional
        TCPSocketAction describes an action based on opening a socket
    terminationGracePeriodSeconds : int, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, optional
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """

    exec?: ValuesSchemaBackstageReadinessProbeExec
    failureThreshold?: int
    grpc?: ValuesSchemaBackstageReadinessProbeGrpc
    httpGet?: ValuesSchemaBackstageReadinessProbeHttpGet
    initialDelaySeconds?: int
    periodSeconds?: int
    successThreshold?: int
    tcpSocket?: ValuesSchemaBackstageReadinessProbeTcpSocket
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema ValuesSchemaBackstageReadinessProbeExec:
    r"""
    ExecAction describes a "run in container" action.

    Attributes
    ----------
    command : [str], optional
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """

    command?: [str]

schema ValuesSchemaBackstageReadinessProbeGrpc:
    r"""
    GRPCAction specifies an action involving a GRPC service.

    Attributes
    ----------
    port : int, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """

    port: int
    service?: str

schema ValuesSchemaBackstageReadinessProbeHttpGet:
    r"""
    HTTPGetAction describes an action based on HTTP Get requests.

    Attributes
    ----------
    host : str, optional
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    httpHeaders : [ValuesSchemaBackstageReadinessProbeHttpGetHttpHeadersItems0], optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, optional
        Path to access on the HTTP server.
    port : str | int, required
    scheme : str, optional
        Scheme to use for connecting to the host. Defaults to HTTP.
    """

    host?: str
    httpHeaders?: [ValuesSchemaBackstageReadinessProbeHttpGetHttpHeadersItems0]
    path?: str
    port: str | int
    scheme?: str

schema ValuesSchemaBackstageReadinessProbeHttpGetHttpHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, required
        The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, required
        The header field value
    """

    name: str
    value: str

schema ValuesSchemaBackstageReadinessProbeTcpSocket:
    r"""
    TCPSocketAction describes an action based on opening a socket

    Attributes
    ----------
    host : str, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : str | int, required
    """

    host?: str
    port: str | int

schema ValuesSchemaBackstageResources:
    r"""
    ResourceRequirements describes the compute resource requirements.

    Attributes
    ----------
    claims : [ValuesSchemaBackstageResourcesClaimsItems0], optional
        Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.

        This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.

        This field is immutable. It can only be set for containers.
    limits : ValuesSchemaBackstageResourcesLimits, optional
        Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    requests : ValuesSchemaBackstageResourcesRequests, optional
        Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """

    claims?: [ValuesSchemaBackstageResourcesClaimsItems0]
    limits?: ValuesSchemaBackstageResourcesLimits
    requests?: ValuesSchemaBackstageResourcesRequests

schema ValuesSchemaBackstageResourcesClaimsItems0:
    r"""
    ResourceClaim references one entry in PodSpec.ResourceClaims.

    Attributes
    ----------
    name : str, required
        Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
    request : str, optional
        Request is the name chosen for a request in the referenced claim. If empty, everything from the claim is made available, otherwise only the result of this request.
    """

    name: str
    request?: str

schema ValuesSchemaBackstageResourcesLimits:
    r"""
    Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """

    [...str]: str | float

schema ValuesSchemaBackstageResourcesRequests:
    r"""
    Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    """

    [...str]: str | float

schema ValuesSchemaBackstageStartupProbe:
    r"""
    Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.

    Attributes
    ----------
    exec : ValuesSchemaBackstageStartupProbeExec, optional
        ExecAction describes a "run in container" action.
    failureThreshold : int, optional
        Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
    grpc : ValuesSchemaBackstageStartupProbeGrpc, optional
        GRPCAction specifies an action involving a GRPC service.
    httpGet : ValuesSchemaBackstageStartupProbeHttpGet, optional
        HTTPGetAction describes an action based on HTTP Get requests.
    initialDelaySeconds : int, optional
        Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    periodSeconds : int, optional
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
    successThreshold : int, optional
        Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
    tcpSocket : ValuesSchemaBackstageStartupProbeTcpSocket, optional
        TCPSocketAction describes an action based on opening a socket
    terminationGracePeriodSeconds : int, optional
        Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
    timeoutSeconds : int, optional
        Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
    """

    exec?: ValuesSchemaBackstageStartupProbeExec
    failureThreshold?: int
    grpc?: ValuesSchemaBackstageStartupProbeGrpc
    httpGet?: ValuesSchemaBackstageStartupProbeHttpGet
    initialDelaySeconds?: int
    periodSeconds?: int
    successThreshold?: int
    tcpSocket?: ValuesSchemaBackstageStartupProbeTcpSocket
    terminationGracePeriodSeconds?: int
    timeoutSeconds?: int

schema ValuesSchemaBackstageStartupProbeExec:
    r"""
    ExecAction describes a "run in container" action.

    Attributes
    ----------
    command : [str], optional
        Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
    """

    command?: [str]

schema ValuesSchemaBackstageStartupProbeGrpc:
    r"""
    GRPCAction specifies an action involving a GRPC service.

    Attributes
    ----------
    port : int, required
        Port number of the gRPC service. Number must be in the range 1 to 65535.
    service : str, optional
        Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

        If this is not specified, the default behavior is defined by gRPC.
    """

    port: int
    service?: str

schema ValuesSchemaBackstageStartupProbeHttpGet:
    r"""
    HTTPGetAction describes an action based on HTTP Get requests.

    Attributes
    ----------
    host : str, optional
        Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
    httpHeaders : [ValuesSchemaBackstageStartupProbeHttpGetHttpHeadersItems0], optional
        Custom headers to set in the request. HTTP allows repeated headers.
    path : str, optional
        Path to access on the HTTP server.
    port : str | int, required
    scheme : str, optional
        Scheme to use for connecting to the host. Defaults to HTTP.
    """

    host?: str
    httpHeaders?: [ValuesSchemaBackstageStartupProbeHttpGetHttpHeadersItems0]
    path?: str
    port: str | int
    scheme?: str

schema ValuesSchemaBackstageStartupProbeHttpGetHttpHeadersItems0:
    r"""
    HTTPHeader describes a custom header to be used in HTTP probes

    Attributes
    ----------
    name : str, required
        The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
    value : str, required
        The header field value
    """

    name: str
    value: str

schema ValuesSchemaBackstageStartupProbeTcpSocket:
    r"""
    TCPSocketAction describes an action based on opening a socket

    Attributes
    ----------
    host : str, optional
        Optional: Host name to connect to, defaults to the pod IP.
    port : str | int, required
    """

    host?: str
    port: str | int

schema ValuesSchemaBackstageTolerationsItems0:
    r"""
    The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.

    Attributes
    ----------
    effect : str, optional
        Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
    key : str, optional
        Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
    operator : str, optional
        Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
    tolerationSeconds : int, optional
        TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
    value : str, optional
        Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
    """

    effect?: str
    key?: str
    operator?: str
    tolerationSeconds?: int
    value?: str

schema ValuesSchemaBackstageTopologySpreadConstraintsItems0:
    r"""
    TopologySpreadConstraint specifies how to spread matching pods among the given topology.

    Attributes
    ----------
    labelSelector : ValuesSchemaBackstageTopologySpreadConstraintsItems0LabelSelector, optional
        A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
    matchLabelKeys : [str], optional
        MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.

        This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
    maxSkew : int, required
        MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
    minDomains : int, optional
        MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.

        For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
    nodeAffinityPolicy : str, optional
        NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.

        If this value is nil, the behavior is equivalent to the Honor policy.
    nodeTaintsPolicy : str, optional
        NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.

        If this value is nil, the behavior is equivalent to the Ignore policy.
    topologyKey : str, required
        TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
    whenUnsatisfiable : str, required
        WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
          but giving higher precedence to topologies that would help reduce the
          skew.
        A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
    """

    labelSelector?: ValuesSchemaBackstageTopologySpreadConstraintsItems0LabelSelector
    matchLabelKeys?: [str]
    maxSkew: int
    minDomains?: int
    nodeAffinityPolicy?: str
    nodeTaintsPolicy?: str
    topologyKey: str
    whenUnsatisfiable: str

schema ValuesSchemaBackstageTopologySpreadConstraintsItems0LabelSelector:
    r"""
    A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.

    Attributes
    ----------
    matchExpressions : [ValuesSchemaBackstageTopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0], optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : ValuesSchemaBackstageTopologySpreadConstraintsItems0LabelSelectorMatchLabels, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    matchExpressions?: [ValuesSchemaBackstageTopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0]
    matchLabels?: ValuesSchemaBackstageTopologySpreadConstraintsItems0LabelSelectorMatchLabels

schema ValuesSchemaBackstageTopologySpreadConstraintsItems0LabelSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, required
        key is the label key that the selector applies to.
    operator : str, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """

    key: str
    operator: str
    values?: [str]

schema ValuesSchemaBackstageTopologySpreadConstraintsItems0LabelSelectorMatchLabels:
    r"""
    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    [...str]: str

schema ValuesSchemaCommonAnnotations:
    r"""
    ValuesSchemaCommonAnnotations
    """

    [...str]: str

schema ValuesSchemaCommonLabels:
    r"""
    ValuesSchemaCommonLabels
    """

    [...str]: str

schema ValuesSchemaDiagnosticMode:
    r"""
    ValuesSchemaDiagnosticMode

    Attributes
    ----------
    args : [str], optional, default is ["infinity"]
    command : [str], optional, default is ["sleep"]
    enabled : bool, optional, default is False
        All probes will be disabled and the command will be overridden
    """

    args?: [str] = ["infinity"]
    command?: [str] = ["sleep"]
    enabled?: bool = False

schema ValuesSchemaGlobal:
    r"""
    ValuesSchemaGlobal

    Attributes
    ----------
    imagePullSecrets : [str], optional, default is []
    imageRegistry : str, optional, default is ""
    """

    imagePullSecrets?: [str] = []
    imageRegistry?: str = ""

    check:
        isunique(imagePullSecrets) if imagePullSecrets

schema ValuesSchemaIngress:
    r"""
    ValuesSchemaIngress

    Attributes
    ----------
    annotations : ValuesSchemaIngressAnnotations, optional, default is {}
    className : str, optional, default is ""
    enabled : bool, optional, default is False
    extraHosts : [ValuesSchemaIngressExtraHostsItems0], optional, default is []
    extraTls : [ValuesSchemaIngressExtraTlsItems0], optional, default is []
    host : str, optional, default is ""
    path : str, optional, default is "/"
    tls : ValuesSchemaIngressTls, optional
    """

    annotations?: ValuesSchemaIngressAnnotations = {}
    className?: str = ""
    enabled?: bool = False
    extraHosts?: [ValuesSchemaIngressExtraHostsItems0] = []
    extraTls?: [ValuesSchemaIngressExtraTlsItems0] = []
    host?: str = ""
    path?: str = "/"
    tls?: ValuesSchemaIngressTls

schema ValuesSchemaIngressAnnotations:
    r"""
    ValuesSchemaIngressAnnotations
    """

    [...str]: str

schema ValuesSchemaIngressExtraHostsItems0:
    r"""
    ValuesSchemaIngressExtraHostsItems0

    Attributes
    ----------
    name : str, optional
    path : str, optional
    pathType : str, optional
    port : int, optional
    """

    name?: str
    path?: str
    pathType?: str
    port?: int

schema ValuesSchemaIngressExtraTlsItems0:
    r"""
    IngressTLS describes the transport layer security associated with an ingress.

    Attributes
    ----------
    hosts : [str], optional
        hosts is a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
    secretName : str, optional
        secretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the "Host" header is used for routing.
    """

    hosts?: [str]
    secretName?: str

schema ValuesSchemaIngressTls:
    r"""
    ValuesSchemaIngressTls

    Attributes
    ----------
    enabled : bool, optional, default is False
        TLS for the host defined at `ingress.host` parameter
    secretName : str, optional, default is ""
    """

    enabled?: bool = False
    secretName?: str = ""

schema ValuesSchemaMetrics:
    r"""
    Allows configuring your backstage instance as a scrape target for Prometheus. Ref: https://github.com/prometheus/prometheus

    Attributes
    ----------
    serviceMonitor : ValuesSchemaMetricsServiceMonitor, optional
        A custom resource that is consumed by Prometheus Operator. Ref: https://github.com/prometheus-operator/prometheus-operator
    """

    serviceMonitor?: ValuesSchemaMetricsServiceMonitor

schema ValuesSchemaMetricsServiceMonitor:
    r"""
    A custom resource that is consumed by Prometheus Operator. Ref: https://github.com/prometheus-operator/prometheus-operator

    Attributes
    ----------
    annotations : ValuesSchemaMetricsServiceMonitorAnnotations, optional, default is {}
    enabled : bool, optional, default is False
        Prometheus Operator must be installed in your cluster prior to enabling.
    interval : str, optional, default is None
    labels : ValuesSchemaMetricsServiceMonitorLabels, optional, default is {}
    path : str, optional, default is "/metrics"
        ote that the /metrics endpoint is NOT present in a freshly scaffolded Backstage app. To setup, follow the Prometheus metrics tutorial. https://github.com/backstage/backstage/blob/master/contrib/docs/tutorials/prometheus-metrics.md
    port : any, optional, default is "http-backend"
        The port where the metrics are exposed. If using OpenTelemetry as [documented here](https://backstage.io/docs/tutorials/setup-opentelemetry/), then the port needs to be explicitly specified. OpenTelemetry's default port is 9464.
    """

    annotations?: ValuesSchemaMetricsServiceMonitorAnnotations = {}
    enabled?: bool = False
    interval?: str = None
    labels?: ValuesSchemaMetricsServiceMonitorLabels = {}
    path?: str = "/metrics"
    port?: any = "http-backend"

schema ValuesSchemaMetricsServiceMonitorAnnotations:
    r"""
    ValuesSchemaMetricsServiceMonitorAnnotations
    """

    [...str]: str

schema ValuesSchemaMetricsServiceMonitorLabels:
    r"""
    ValuesSchemaMetricsServiceMonitorLabels
    """

    [...str]: str

schema ValuesSchemaNetworkPolicy:
    r"""
    ValuesSchemaNetworkPolicy

    Attributes
    ----------
    egressRules : ValuesSchemaNetworkPolicyEgressRules, optional
    enabled : bool, optional, default is False
    ingressRules : ValuesSchemaNetworkPolicyIngressRules, optional
    """

    egressRules?: ValuesSchemaNetworkPolicyEgressRules
    enabled?: bool = False
    ingressRules?: ValuesSchemaNetworkPolicyIngressRules

schema ValuesSchemaNetworkPolicyEgressRules:
    r"""
    ValuesSchemaNetworkPolicyEgressRules

    Attributes
    ----------
    customRules : [ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0], optional
    denyConnectionsToExternal : bool, optional, default is False
    """

    customRules?: [ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0]
    denyConnectionsToExternal?: bool = False

schema ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0:
    r"""
    NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8

    Attributes
    ----------
    ports : [ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0PortsItems0], optional
        List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
    to : [ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0], optional
        List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
    """

    ports?: [ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0PortsItems0]
    to?: [ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0]

schema ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0PortsItems0:
    r"""
    NetworkPolicyPort describes a port to allow traffic on

    Attributes
    ----------
    port : str | int, optional
    $protocol : str, optional
        The protocol (TCP or UDP) which traffic must match. If not specified, this field defaults to TCP.
    """

    port?: str | int
    $protocol?: str

schema ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0:
    r"""
    NetworkPolicyPeer describes a peer to allow traffic from. Exactly one of its fields must be specified.

    Attributes
    ----------
    ipBlock : ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0IpBlock, optional
        IPBlock describes a particular CIDR (Ex. "192.168.1.1/24") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
    namespaceSelector : ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0NamespaceSelector, optional
        A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
    podSelector : ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0PodSelector, optional
        A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
    """

    ipBlock?: ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0IpBlock
    namespaceSelector?: ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0NamespaceSelector
    podSelector?: ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0PodSelector

schema ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0IpBlock:
    r"""
    IPBlock describes a particular CIDR (Ex. "192.168.1.1/24") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.

    Attributes
    ----------
    cidr : str, required
        CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24"
    except : [str], optional
        Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" Except values will be rejected if they are outside the CIDR range
    """

    cidr: str
    except?: [str]

schema ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0NamespaceSelector:
    r"""
    A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.

    Attributes
    ----------
    matchExpressions : [ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0NamespaceSelectorMatchExpressionsItems0], optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0NamespaceSelectorMatchLabels, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    matchExpressions?: [ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0NamespaceSelectorMatchExpressionsItems0]
    matchLabels?: ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0NamespaceSelectorMatchLabels

schema ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0NamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, required
        key is the label key that the selector applies to.
    operator : str, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """

    key: str
    operator: str
    values?: [str]

schema ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0NamespaceSelectorMatchLabels:
    r"""
    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    [...str]: str

schema ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0PodSelector:
    r"""
    A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.

    Attributes
    ----------
    matchExpressions : [ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0PodSelectorMatchExpressionsItems0], optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0PodSelectorMatchLabels, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    matchExpressions?: [ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0PodSelectorMatchExpressionsItems0]
    matchLabels?: ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0PodSelectorMatchLabels

schema ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0PodSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, required
        key is the label key that the selector applies to.
    operator : str, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """

    key: str
    operator: str
    values?: [str]

schema ValuesSchemaNetworkPolicyEgressRulesCustomRulesItems0ToItems0PodSelectorMatchLabels:
    r"""
    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    [...str]: str

schema ValuesSchemaNetworkPolicyIngressRules:
    r"""
    ValuesSchemaNetworkPolicyIngressRules

    Attributes
    ----------
    customRules : [ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0], optional
    namespaceSelector : ValuesSchemaNetworkPolicyIngressRulesNamespaceSelector, optional
        A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
    podSelector : ValuesSchemaNetworkPolicyIngressRulesPodSelector, optional
        A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
    """

    customRules?: [ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0]
    namespaceSelector?: ValuesSchemaNetworkPolicyIngressRulesNamespaceSelector
    podSelector?: ValuesSchemaNetworkPolicyIngressRulesPodSelector

schema ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0:
    r"""
    NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.

    Attributes
    ----------
    from : [ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0], optional
        List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least on item, this rule allows traffic only if the traffic matches at least one item in the from list.
    ports : [ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0PortsItems0], optional
        List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
    """

    from?: [ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0]
    ports?: [ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0PortsItems0]

schema ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0:
    r"""
    NetworkPolicyPeer describes a peer to allow traffic from. Exactly one of its fields must be specified.

    Attributes
    ----------
    ipBlock : ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0IpBlock, optional
        IPBlock describes a particular CIDR (Ex. "192.168.1.1/24") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
    namespaceSelector : ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0NamespaceSelector, optional
        A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
    podSelector : ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0PodSelector, optional
        A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
    """

    ipBlock?: ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0IpBlock
    namespaceSelector?: ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0NamespaceSelector
    podSelector?: ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0PodSelector

schema ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0IpBlock:
    r"""
    IPBlock describes a particular CIDR (Ex. "192.168.1.1/24") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.

    Attributes
    ----------
    cidr : str, required
        CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24"
    except : [str], optional
        Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" Except values will be rejected if they are outside the CIDR range
    """

    cidr: str
    except?: [str]

schema ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0NamespaceSelector:
    r"""
    A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.

    Attributes
    ----------
    matchExpressions : [ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0NamespaceSelectorMatchExpressionsItems0], optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0NamespaceSelectorMatchLabels, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    matchExpressions?: [ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0NamespaceSelectorMatchExpressionsItems0]
    matchLabels?: ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0NamespaceSelectorMatchLabels

schema ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0NamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, required
        key is the label key that the selector applies to.
    operator : str, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """

    key: str
    operator: str
    values?: [str]

schema ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0NamespaceSelectorMatchLabels:
    r"""
    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    [...str]: str

schema ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0PodSelector:
    r"""
    A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.

    Attributes
    ----------
    matchExpressions : [ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0PodSelectorMatchExpressionsItems0], optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0PodSelectorMatchLabels, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    matchExpressions?: [ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0PodSelectorMatchExpressionsItems0]
    matchLabels?: ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0PodSelectorMatchLabels

schema ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0PodSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, required
        key is the label key that the selector applies to.
    operator : str, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """

    key: str
    operator: str
    values?: [str]

schema ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0FromItems0PodSelectorMatchLabels:
    r"""
    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    [...str]: str

schema ValuesSchemaNetworkPolicyIngressRulesCustomRulesItems0PortsItems0:
    r"""
    NetworkPolicyPort describes a port to allow traffic on

    Attributes
    ----------
    port : str | int, optional
    $protocol : str, optional
        The protocol (TCP or UDP) which traffic must match. If not specified, this field defaults to TCP.
    """

    port?: str | int
    $protocol?: str

schema ValuesSchemaNetworkPolicyIngressRulesNamespaceSelector:
    r"""
    A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.

    Attributes
    ----------
    matchExpressions : [ValuesSchemaNetworkPolicyIngressRulesNamespaceSelectorMatchExpressionsItems0], optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : ValuesSchemaNetworkPolicyIngressRulesNamespaceSelectorMatchLabels, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    matchExpressions?: [ValuesSchemaNetworkPolicyIngressRulesNamespaceSelectorMatchExpressionsItems0]
    matchLabels?: ValuesSchemaNetworkPolicyIngressRulesNamespaceSelectorMatchLabels

schema ValuesSchemaNetworkPolicyIngressRulesNamespaceSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, required
        key is the label key that the selector applies to.
    operator : str, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """

    key: str
    operator: str
    values?: [str]

schema ValuesSchemaNetworkPolicyIngressRulesNamespaceSelectorMatchLabels:
    r"""
    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    [...str]: str

schema ValuesSchemaNetworkPolicyIngressRulesPodSelector:
    r"""
    A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.

    Attributes
    ----------
    matchExpressions : [ValuesSchemaNetworkPolicyIngressRulesPodSelectorMatchExpressionsItems0], optional
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
    matchLabels : ValuesSchemaNetworkPolicyIngressRulesPodSelectorMatchLabels, optional
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    matchExpressions?: [ValuesSchemaNetworkPolicyIngressRulesPodSelectorMatchExpressionsItems0]
    matchLabels?: ValuesSchemaNetworkPolicyIngressRulesPodSelectorMatchLabels

schema ValuesSchemaNetworkPolicyIngressRulesPodSelectorMatchExpressionsItems0:
    r"""
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.

    Attributes
    ----------
    key : str, required
        key is the label key that the selector applies to.
    operator : str, required
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    values : [str], optional
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
    """

    key: str
    operator: str
    values?: [str]

schema ValuesSchemaNetworkPolicyIngressRulesPodSelectorMatchLabels:
    r"""
    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
    """

    [...str]: str

schema ValuesSchemaPostgresql:
    r"""
    ValuesSchemaPostgresql

    Attributes
    ----------
    enabled : bool
    architecture : str, optional
        Allowed values: `standalone` or `replication`
    auth : ValuesSchemaPostgresqlAuth, optional
    metrics : ValuesSchemaPostgresqlMetrics, optional
    persistence : ValuesSchemaPostgresqlPersistence, optional
    replication : ValuesSchemaPostgresqlReplication, optional
    resources : ValuesSchemaPostgresqlResources, optional
        Configure resource requests
    volumePermissions : ValuesSchemaPostgresqlVolumePermissions, optional
    """

    enabled: bool
    architecture?: str
    auth?: ValuesSchemaPostgresqlAuth
    metrics?: ValuesSchemaPostgresqlMetrics
    persistence?: ValuesSchemaPostgresqlPersistence
    replication?: ValuesSchemaPostgresqlReplication
    resources?: ValuesSchemaPostgresqlResources
    volumePermissions?: ValuesSchemaPostgresqlVolumePermissions

schema ValuesSchemaPostgresqlAuth:
    r"""
    ValuesSchemaPostgresqlAuth

    Attributes
    ----------
    database : str, optional
        Name of the custom database to be created during the 1st initialization of PostgreSQL
    enablePostgresUser : bool, optional
        Assign a password to the "postgres" admin user. Otherwise, remote access will be blocked for this user
    password : str, optional
        Defaults to a random 10-character alphanumeric string if not set
    postgresPassword : str, optional
        Defaults to a random 10-character alphanumeric string if not set
    replicationPassword : str, optional
        Defaults to a random 10-character alphanumeric string if not set
    replicationUsername : str, optional
        Name of user used to manage replication.
    username : str, optional
        Name of the custom user to be created during the 1st initialization of PostgreSQL. This user only has permissions on the PostgreSQL custom database
    """

    database?: str
    enablePostgresUser?: bool
    password?: str
    postgresPassword?: str
    replicationPassword?: str
    replicationUsername?: str
    username?: str
    secretKeys?: ValuesSchemaPostgresqlAuthSecretKeys

schema ValuesSchemaPostgresqlAuthSecretKeys:
    adminPasswordKey?: str
    userPasswordKey?: str

schema ValuesSchemaPostgresqlMetrics:
    r"""
    ValuesSchemaPostgresqlMetrics

    Attributes
    ----------
    enabled : bool, optional
    """

    enabled?: bool

schema ValuesSchemaPostgresqlPersistence:
    r"""
    ValuesSchemaPostgresqlPersistence

    Attributes
    ----------
    size : str, optional
    """

    size?: str

schema ValuesSchemaPostgresqlReplication:
    r"""
    ValuesSchemaPostgresqlReplication

    Attributes
    ----------
    enabled : bool, optional
    readReplicas : int, optional
    """

    enabled?: bool
    readReplicas?: int

schema ValuesSchemaPostgresqlResources:
    r"""
    Configure resource requests

    Attributes
    ----------
    requests : ValuesSchemaPostgresqlResourcesRequests, optional
    """

    requests?: ValuesSchemaPostgresqlResourcesRequests

schema ValuesSchemaPostgresqlResourcesRequests:
    r"""
    ValuesSchemaPostgresqlResourcesRequests

    Attributes
    ----------
    cpu : str, optional
    memory : str, optional
    """

    cpu?: str
    memory?: str

schema ValuesSchemaPostgresqlVolumePermissions:
    r"""
    ValuesSchemaPostgresqlVolumePermissions

    Attributes
    ----------
    enabled : bool, optional
        Change the owner of the persist volume mountpoint to RunAsUser:fsGroup
    """

    enabled?: bool

schema ValuesSchemaService:
    r"""
    ValuesSchemaService

    Attributes
    ----------
    annotations : ValuesSchemaServiceAnnotations, optional, default is {}
    clusterIP : str, optional, default is ""
    externalTrafficPolicy : "Cluster" | "Local", optional, default is "Cluster"
        Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
    extraPorts : [ValuesSchemaServiceExtraPortsItems0], optional, default is []
    ipFamilies : ["IPv4" | "IPv6"], optional, default is []
        Ref: https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services
    ipFamilyPolicy : "" | "SingleStack" | "PreferDualStack" | "RequireDualStack", optional, default is ""
        Ref: https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services
    loadBalancerIP : str, optional, default is ""
        Ref: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer
    loadBalancerSourceRanges : [str], optional, default is []
        Ref: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer
    nodePorts : ValuesSchemaServiceNodePorts, optional
    ports : ValuesSchemaServicePorts, optional
    sessionAffinity : "None" | "ClientIP", optional, default is "None"
        Ref: https://kubernetes.io/docs/concepts/services-networking/service/#session-stickiness
    $type : "ClusterIP" | "NodePort" | "LoadBalancer" | "ExternalName", optional, default is "ClusterIP"
    """

    annotations?: ValuesSchemaServiceAnnotations = {}
    clusterIP?: str = ""
    externalTrafficPolicy?: "Cluster" | "Local" = "Cluster"
    extraPorts?: [ValuesSchemaServiceExtraPortsItems0] = []
    ipFamilies?: ["IPv4" | "IPv6"] = []
    ipFamilyPolicy?: "" | "SingleStack" | "PreferDualStack" | "RequireDualStack" = ""
    loadBalancerIP?: str = ""
    loadBalancerSourceRanges?: [str] = []
    nodePorts?: ValuesSchemaServiceNodePorts
    ports?: ValuesSchemaServicePorts
    sessionAffinity?: "None" | "ClientIP" = "None"
    $type?: "ClusterIP" | "NodePort" | "LoadBalancer" | "ExternalName" = "ClusterIP"

schema ValuesSchemaServiceAccount:
    r"""
    ValuesSchemaServiceAccount

    Attributes
    ----------
    annotations : ValuesSchemaServiceAccountAnnotations, optional, default is {}
    automountServiceAccountToken : bool, optional, default is True
    create : bool, optional, default is False
    labels : ValuesSchemaServiceAccountLabels, optional, default is {}
    name : str, optional, default is ""
        If not set and `serviceAccount.create` is true, a name is generated
    """

    annotations?: ValuesSchemaServiceAccountAnnotations = {}
    automountServiceAccountToken?: bool = True
    create?: bool = False
    labels?: ValuesSchemaServiceAccountLabels = {}
    name?: str = ""

schema ValuesSchemaServiceAccountAnnotations:
    r"""
    ValuesSchemaServiceAccountAnnotations
    """

    [...str]: str

schema ValuesSchemaServiceAccountLabels:
    r"""
    ValuesSchemaServiceAccountLabels
    """

    [...str]: str

schema ValuesSchemaServiceAnnotations:
    r"""
    ValuesSchemaServiceAnnotations
    """

    [...str]: str

schema ValuesSchemaServiceExtraPortsItems0:
    r"""
    ValuesSchemaServiceExtraPortsItems0
    """

    [...str]: any

schema ValuesSchemaServiceNodePorts:
    r"""
    ValuesSchemaServiceNodePorts

    Attributes
    ----------
    backend : str | int, optional, default is ""
    """

    backend?: str | int = ""

schema ValuesSchemaServicePorts:
    r"""
    ValuesSchemaServicePorts

    Attributes
    ----------
    backend : int, optional, default is 7007
    name : str, optional, default is "http-backend"
    targetPort : str, optional, default is "backend"
    """

    backend?: int = 7007
    name?: str = "http-backend"
    targetPort?: str = "backend"

